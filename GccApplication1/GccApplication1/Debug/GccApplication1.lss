
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004b0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000524  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  00000524  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000524  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000554  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  00000590  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013bc  00000000  00000000  000006e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000902  00000000  00000000  00001aa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bc2  00000000  00000000  000023a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000278  00000000  00000000  00002f68  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000594  00000000  00000000  000031e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b83  00000000  00000000  00003774  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  000042f7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 88 00 	call	0x110	; 0x110 <main>
  74:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_1>:
	}
	
}


ISR(INT0_vect){
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	2f 93       	push	r18
  88:	3f 93       	push	r19
  8a:	4f 93       	push	r20
  8c:	5f 93       	push	r21
  8e:	6f 93       	push	r22
  90:	7f 93       	push	r23
  92:	8f 93       	push	r24
  94:	9f 93       	push	r25
  96:	af 93       	push	r26
  98:	bf 93       	push	r27
  9a:	ef 93       	push	r30
  9c:	ff 93       	push	r31
	if(pedestrian_mode == 0){
  9e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <pedestrian_mode>
  a2:	81 11       	cpse	r24, r1
  a4:	11 c0       	rjmp	.+34     	; 0xc8 <__vector_1+0x4c>
		pedestrian_mode = 1;
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <pedestrian_mode>
		uint8_t color = 0;
		switch (current_car_state){
  ac:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  b0:	88 23       	and	r24, r24
  b2:	21 f0       	breq	.+8      	; 0xbc <__vector_1+0x40>
  b4:	81 30       	cpi	r24, 0x01	; 1
  b6:	21 f0       	breq	.+8      	; 0xc0 <__vector_1+0x44>


ISR(INT0_vect){
	if(pedestrian_mode == 0){
		pedestrian_mode = 1;
		uint8_t color = 0;
  b8:	80 e0       	ldi	r24, 0x00	; 0
  ba:	03 c0       	rjmp	.+6      	; 0xc2 <__vector_1+0x46>
			break;
			case YELLOW:
				color = YELLOW;
			break;
			case GREEN:
				color = RED;
  bc:	82 e0       	ldi	r24, 0x02	; 2
			break;
  be:	01 c0       	rjmp	.+2      	; 0xc2 <__vector_1+0x46>
		switch (current_car_state){
			case RED:
				color = GREEN;
			break;
			case YELLOW:
				color = YELLOW;
  c0:	81 e0       	ldi	r24, 0x01	; 1
			case GREEN:
				color = RED;
			break;
				
		}
		LED_on(color, PORT_PEDESTRIAN);
  c2:	62 e4       	ldi	r22, 0x42	; 66
  c4:	0e 94 80 00 	call	0x100	; 0x100 <LED_on>
	}
  c8:	ff 91       	pop	r31
  ca:	ef 91       	pop	r30
  cc:	bf 91       	pop	r27
  ce:	af 91       	pop	r26
  d0:	9f 91       	pop	r25
  d2:	8f 91       	pop	r24
  d4:	7f 91       	pop	r23
  d6:	6f 91       	pop	r22
  d8:	5f 91       	pop	r21
  da:	4f 91       	pop	r20
  dc:	3f 91       	pop	r19
  de:	2f 91       	pop	r18
  e0:	0f 90       	pop	r0
  e2:	0f be       	out	0x3f, r0	; 63
  e4:	0f 90       	pop	r0
  e6:	1f 90       	pop	r1
  e8:	18 95       	reti

000000ea <BUTTON_init>:
#include "button.h"


EN_DIO_Error_t BUTTON_init(uint8_t pinNumber, uint8_t portNumber){
	return DIO_init(pinNumber, portNumber, IN);
  ea:	40 e0       	ldi	r20, 0x00	; 0
  ec:	0e 94 8d 00 	call	0x11a	; 0x11a <DIO_init>
}
  f0:	08 95       	ret

000000f2 <BUTTON_read>:
EN_DIO_Error_t BUTTON_read(uint8_t pinNumber, uint8_t portNumber, uint8_t *value){
	return DIO_read(pinNumber, portNumber, value);
  f2:	0e 94 c7 01 	call	0x38e	; 0x38e <DIO_read>
  f6:	08 95       	ret

000000f8 <LED_init>:
#include "led.h"

EN_DIO_Error_t LED_init(uint8_t pinNumber, uint8_t portNumber){
	return DIO_init(pinNumber, portNumber, OUT);
  f8:	41 e0       	ldi	r20, 0x01	; 1
  fa:	0e 94 8d 00 	call	0x11a	; 0x11a <DIO_init>
}
  fe:	08 95       	ret

00000100 <LED_on>:

EN_DIO_Error_t LED_on(uint8_t pinNumber, uint8_t portNumber){
	return DIO_write(pinNumber, portNumber, HIGH);
 100:	41 e0       	ldi	r20, 0x01	; 1
 102:	0e 94 2a 01 	call	0x254	; 0x254 <DIO_write>
}
 106:	08 95       	ret

00000108 <LED_off>:

EN_DIO_Error_t LED_off(uint8_t pinNumber, uint8_t portNumber){
	return DIO_write(pinNumber, portNumber, LOW);
 108:	40 e0       	ldi	r20, 0x00	; 0
 10a:	0e 94 2a 01 	call	0x254	; 0x254 <DIO_write>
}
 10e:	08 95       	ret

00000110 <main>:
#include "Testing/test.h"

int main(void)
{
	//app_start();
	button_test();
 110:	0e 94 35 02 	call	0x46a	; 0x46a <button_test>
}
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	08 95       	ret

0000011a <DIO_init>:
		break;
		default:
			return WRONG_PORT;
		break;
	}
}
 11a:	62 34       	cpi	r22, 0x42	; 66
 11c:	69 f1       	breq	.+90     	; 0x178 <DIO_init+0x5e>
 11e:	18 f4       	brcc	.+6      	; 0x126 <DIO_init+0xc>
 120:	61 34       	cpi	r22, 0x41	; 65
 122:	41 f0       	breq	.+16     	; 0x134 <DIO_init+0x1a>
 124:	8d c0       	rjmp	.+282    	; 0x240 <DIO_init+0x126>
 126:	63 34       	cpi	r22, 0x43	; 67
 128:	09 f4       	brne	.+2      	; 0x12c <DIO_init+0x12>
 12a:	48 c0       	rjmp	.+144    	; 0x1bc <DIO_init+0xa2>
 12c:	64 34       	cpi	r22, 0x44	; 68
 12e:	09 f4       	brne	.+2      	; 0x132 <DIO_init+0x18>
 130:	66 c0       	rjmp	.+204    	; 0x1fe <DIO_init+0xe4>
 132:	86 c0       	rjmp	.+268    	; 0x240 <DIO_init+0x126>
 134:	41 11       	cpse	r20, r1
 136:	0f c0       	rjmp	.+30     	; 0x156 <DIO_init+0x3c>
 138:	4a b3       	in	r20, 0x1a	; 26
 13a:	21 e0       	ldi	r18, 0x01	; 1
 13c:	30 e0       	ldi	r19, 0x00	; 0
 13e:	b9 01       	movw	r22, r18
 140:	02 c0       	rjmp	.+4      	; 0x146 <DIO_init+0x2c>
 142:	66 0f       	add	r22, r22
 144:	77 1f       	adc	r23, r23
 146:	8a 95       	dec	r24
 148:	e2 f7       	brpl	.-8      	; 0x142 <DIO_init+0x28>
 14a:	cb 01       	movw	r24, r22
 14c:	80 95       	com	r24
 14e:	84 23       	and	r24, r20
 150:	8a bb       	out	0x1a, r24	; 26
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	08 95       	ret
 156:	41 30       	cpi	r20, 0x01	; 1
 158:	09 f0       	breq	.+2      	; 0x15c <DIO_init+0x42>
 15a:	74 c0       	rjmp	.+232    	; 0x244 <DIO_init+0x12a>
 15c:	4a b3       	in	r20, 0x1a	; 26
 15e:	21 e0       	ldi	r18, 0x01	; 1
 160:	30 e0       	ldi	r19, 0x00	; 0
 162:	b9 01       	movw	r22, r18
 164:	02 c0       	rjmp	.+4      	; 0x16a <DIO_init+0x50>
 166:	66 0f       	add	r22, r22
 168:	77 1f       	adc	r23, r23
 16a:	8a 95       	dec	r24
 16c:	e2 f7       	brpl	.-8      	; 0x166 <DIO_init+0x4c>
 16e:	cb 01       	movw	r24, r22
 170:	84 2b       	or	r24, r20
 172:	8a bb       	out	0x1a, r24	; 26
 174:	80 e0       	ldi	r24, 0x00	; 0
 176:	08 95       	ret
 178:	41 11       	cpse	r20, r1
 17a:	0f c0       	rjmp	.+30     	; 0x19a <DIO_init+0x80>
 17c:	47 b3       	in	r20, 0x17	; 23
 17e:	21 e0       	ldi	r18, 0x01	; 1
 180:	30 e0       	ldi	r19, 0x00	; 0
 182:	b9 01       	movw	r22, r18
 184:	02 c0       	rjmp	.+4      	; 0x18a <DIO_init+0x70>
 186:	66 0f       	add	r22, r22
 188:	77 1f       	adc	r23, r23
 18a:	8a 95       	dec	r24
 18c:	e2 f7       	brpl	.-8      	; 0x186 <DIO_init+0x6c>
 18e:	cb 01       	movw	r24, r22
 190:	80 95       	com	r24
 192:	84 23       	and	r24, r20
 194:	87 bb       	out	0x17, r24	; 23
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	08 95       	ret
 19a:	41 30       	cpi	r20, 0x01	; 1
 19c:	09 f0       	breq	.+2      	; 0x1a0 <DIO_init+0x86>
 19e:	54 c0       	rjmp	.+168    	; 0x248 <DIO_init+0x12e>
 1a0:	47 b3       	in	r20, 0x17	; 23
 1a2:	21 e0       	ldi	r18, 0x01	; 1
 1a4:	30 e0       	ldi	r19, 0x00	; 0
 1a6:	b9 01       	movw	r22, r18
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <DIO_init+0x94>
 1aa:	66 0f       	add	r22, r22
 1ac:	77 1f       	adc	r23, r23
 1ae:	8a 95       	dec	r24
 1b0:	e2 f7       	brpl	.-8      	; 0x1aa <DIO_init+0x90>
 1b2:	cb 01       	movw	r24, r22
 1b4:	84 2b       	or	r24, r20
 1b6:	87 bb       	out	0x17, r24	; 23
 1b8:	80 e0       	ldi	r24, 0x00	; 0
 1ba:	08 95       	ret
 1bc:	41 11       	cpse	r20, r1
 1be:	0f c0       	rjmp	.+30     	; 0x1de <DIO_init+0xc4>
 1c0:	44 b3       	in	r20, 0x14	; 20
 1c2:	21 e0       	ldi	r18, 0x01	; 1
 1c4:	30 e0       	ldi	r19, 0x00	; 0
 1c6:	b9 01       	movw	r22, r18
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <DIO_init+0xb4>
 1ca:	66 0f       	add	r22, r22
 1cc:	77 1f       	adc	r23, r23
 1ce:	8a 95       	dec	r24
 1d0:	e2 f7       	brpl	.-8      	; 0x1ca <DIO_init+0xb0>
 1d2:	cb 01       	movw	r24, r22
 1d4:	80 95       	com	r24
 1d6:	84 23       	and	r24, r20
 1d8:	84 bb       	out	0x14, r24	; 20
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	08 95       	ret
 1de:	41 30       	cpi	r20, 0x01	; 1
 1e0:	a9 f5       	brne	.+106    	; 0x24c <DIO_init+0x132>
 1e2:	44 b3       	in	r20, 0x14	; 20
 1e4:	21 e0       	ldi	r18, 0x01	; 1
 1e6:	30 e0       	ldi	r19, 0x00	; 0
 1e8:	b9 01       	movw	r22, r18
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <DIO_init+0xd6>
 1ec:	66 0f       	add	r22, r22
 1ee:	77 1f       	adc	r23, r23
 1f0:	8a 95       	dec	r24
 1f2:	e2 f7       	brpl	.-8      	; 0x1ec <DIO_init+0xd2>
 1f4:	cb 01       	movw	r24, r22
 1f6:	84 2b       	or	r24, r20
 1f8:	84 bb       	out	0x14, r24	; 20
 1fa:	80 e0       	ldi	r24, 0x00	; 0
 1fc:	08 95       	ret
 1fe:	41 11       	cpse	r20, r1
 200:	0f c0       	rjmp	.+30     	; 0x220 <DIO_init+0x106>
 202:	41 b3       	in	r20, 0x11	; 17
 204:	21 e0       	ldi	r18, 0x01	; 1
 206:	30 e0       	ldi	r19, 0x00	; 0
 208:	b9 01       	movw	r22, r18
 20a:	02 c0       	rjmp	.+4      	; 0x210 <DIO_init+0xf6>
 20c:	66 0f       	add	r22, r22
 20e:	77 1f       	adc	r23, r23
 210:	8a 95       	dec	r24
 212:	e2 f7       	brpl	.-8      	; 0x20c <DIO_init+0xf2>
 214:	cb 01       	movw	r24, r22
 216:	80 95       	com	r24
 218:	84 23       	and	r24, r20
 21a:	81 bb       	out	0x11, r24	; 17
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	08 95       	ret
 220:	41 30       	cpi	r20, 0x01	; 1
 222:	b1 f4       	brne	.+44     	; 0x250 <DIO_init+0x136>
 224:	41 b3       	in	r20, 0x11	; 17
 226:	21 e0       	ldi	r18, 0x01	; 1
 228:	30 e0       	ldi	r19, 0x00	; 0
 22a:	b9 01       	movw	r22, r18
 22c:	02 c0       	rjmp	.+4      	; 0x232 <DIO_init+0x118>
 22e:	66 0f       	add	r22, r22
 230:	77 1f       	adc	r23, r23
 232:	8a 95       	dec	r24
 234:	e2 f7       	brpl	.-8      	; 0x22e <DIO_init+0x114>
 236:	cb 01       	movw	r24, r22
 238:	84 2b       	or	r24, r20
 23a:	81 bb       	out	0x11, r24	; 17
 23c:	80 e0       	ldi	r24, 0x00	; 0
 23e:	08 95       	ret
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	08 95       	ret
 244:	83 e0       	ldi	r24, 0x03	; 3
 246:	08 95       	ret
 248:	83 e0       	ldi	r24, 0x03	; 3
 24a:	08 95       	ret
 24c:	83 e0       	ldi	r24, 0x03	; 3
 24e:	08 95       	ret
 250:	83 e0       	ldi	r24, 0x03	; 3
 252:	08 95       	ret

00000254 <DIO_write>:
 254:	62 34       	cpi	r22, 0x42	; 66
 256:	69 f1       	breq	.+90     	; 0x2b2 <DIO_write+0x5e>
 258:	18 f4       	brcc	.+6      	; 0x260 <DIO_write+0xc>
 25a:	61 34       	cpi	r22, 0x41	; 65
 25c:	41 f0       	breq	.+16     	; 0x26e <DIO_write+0x1a>
 25e:	8d c0       	rjmp	.+282    	; 0x37a <DIO_write+0x126>
 260:	63 34       	cpi	r22, 0x43	; 67
 262:	09 f4       	brne	.+2      	; 0x266 <DIO_write+0x12>
 264:	48 c0       	rjmp	.+144    	; 0x2f6 <DIO_write+0xa2>
 266:	64 34       	cpi	r22, 0x44	; 68
 268:	09 f4       	brne	.+2      	; 0x26c <DIO_write+0x18>
 26a:	66 c0       	rjmp	.+204    	; 0x338 <DIO_write+0xe4>
 26c:	86 c0       	rjmp	.+268    	; 0x37a <DIO_write+0x126>
 26e:	41 11       	cpse	r20, r1
 270:	0f c0       	rjmp	.+30     	; 0x290 <DIO_write+0x3c>
 272:	4b b3       	in	r20, 0x1b	; 27
 274:	21 e0       	ldi	r18, 0x01	; 1
 276:	30 e0       	ldi	r19, 0x00	; 0
 278:	b9 01       	movw	r22, r18
 27a:	02 c0       	rjmp	.+4      	; 0x280 <DIO_write+0x2c>
 27c:	66 0f       	add	r22, r22
 27e:	77 1f       	adc	r23, r23
 280:	8a 95       	dec	r24
 282:	e2 f7       	brpl	.-8      	; 0x27c <DIO_write+0x28>
 284:	cb 01       	movw	r24, r22
 286:	80 95       	com	r24
 288:	84 23       	and	r24, r20
 28a:	8b bb       	out	0x1b, r24	; 27
 28c:	80 e0       	ldi	r24, 0x00	; 0
 28e:	08 95       	ret
 290:	41 30       	cpi	r20, 0x01	; 1
 292:	09 f0       	breq	.+2      	; 0x296 <DIO_write+0x42>
 294:	74 c0       	rjmp	.+232    	; 0x37e <DIO_write+0x12a>
 296:	4b b3       	in	r20, 0x1b	; 27
 298:	21 e0       	ldi	r18, 0x01	; 1
 29a:	30 e0       	ldi	r19, 0x00	; 0
 29c:	b9 01       	movw	r22, r18
 29e:	02 c0       	rjmp	.+4      	; 0x2a4 <DIO_write+0x50>
 2a0:	66 0f       	add	r22, r22
 2a2:	77 1f       	adc	r23, r23
 2a4:	8a 95       	dec	r24
 2a6:	e2 f7       	brpl	.-8      	; 0x2a0 <DIO_write+0x4c>
 2a8:	cb 01       	movw	r24, r22
 2aa:	84 2b       	or	r24, r20
 2ac:	8b bb       	out	0x1b, r24	; 27
 2ae:	80 e0       	ldi	r24, 0x00	; 0
 2b0:	08 95       	ret
 2b2:	41 11       	cpse	r20, r1
 2b4:	0f c0       	rjmp	.+30     	; 0x2d4 <DIO_write+0x80>
 2b6:	48 b3       	in	r20, 0x18	; 24
 2b8:	21 e0       	ldi	r18, 0x01	; 1
 2ba:	30 e0       	ldi	r19, 0x00	; 0
 2bc:	b9 01       	movw	r22, r18
 2be:	02 c0       	rjmp	.+4      	; 0x2c4 <DIO_write+0x70>
 2c0:	66 0f       	add	r22, r22
 2c2:	77 1f       	adc	r23, r23
 2c4:	8a 95       	dec	r24
 2c6:	e2 f7       	brpl	.-8      	; 0x2c0 <DIO_write+0x6c>
 2c8:	cb 01       	movw	r24, r22
 2ca:	80 95       	com	r24
 2cc:	84 23       	and	r24, r20
 2ce:	88 bb       	out	0x18, r24	; 24
 2d0:	80 e0       	ldi	r24, 0x00	; 0
 2d2:	08 95       	ret
 2d4:	41 30       	cpi	r20, 0x01	; 1
 2d6:	09 f0       	breq	.+2      	; 0x2da <DIO_write+0x86>
 2d8:	54 c0       	rjmp	.+168    	; 0x382 <DIO_write+0x12e>
 2da:	48 b3       	in	r20, 0x18	; 24
 2dc:	21 e0       	ldi	r18, 0x01	; 1
 2de:	30 e0       	ldi	r19, 0x00	; 0
 2e0:	b9 01       	movw	r22, r18
 2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <DIO_write+0x94>
 2e4:	66 0f       	add	r22, r22
 2e6:	77 1f       	adc	r23, r23
 2e8:	8a 95       	dec	r24
 2ea:	e2 f7       	brpl	.-8      	; 0x2e4 <DIO_write+0x90>
 2ec:	cb 01       	movw	r24, r22
 2ee:	84 2b       	or	r24, r20
 2f0:	88 bb       	out	0x18, r24	; 24
 2f2:	80 e0       	ldi	r24, 0x00	; 0
 2f4:	08 95       	ret
 2f6:	41 11       	cpse	r20, r1
 2f8:	0f c0       	rjmp	.+30     	; 0x318 <DIO_write+0xc4>
 2fa:	45 b3       	in	r20, 0x15	; 21
 2fc:	21 e0       	ldi	r18, 0x01	; 1
 2fe:	30 e0       	ldi	r19, 0x00	; 0
 300:	b9 01       	movw	r22, r18
 302:	02 c0       	rjmp	.+4      	; 0x308 <DIO_write+0xb4>
 304:	66 0f       	add	r22, r22
 306:	77 1f       	adc	r23, r23
 308:	8a 95       	dec	r24
 30a:	e2 f7       	brpl	.-8      	; 0x304 <DIO_write+0xb0>
 30c:	cb 01       	movw	r24, r22
 30e:	80 95       	com	r24
 310:	84 23       	and	r24, r20
 312:	85 bb       	out	0x15, r24	; 21
 314:	80 e0       	ldi	r24, 0x00	; 0
 316:	08 95       	ret
 318:	41 30       	cpi	r20, 0x01	; 1
 31a:	a9 f5       	brne	.+106    	; 0x386 <DIO_write+0x132>
 31c:	45 b3       	in	r20, 0x15	; 21
 31e:	21 e0       	ldi	r18, 0x01	; 1
 320:	30 e0       	ldi	r19, 0x00	; 0
 322:	b9 01       	movw	r22, r18
 324:	02 c0       	rjmp	.+4      	; 0x32a <DIO_write+0xd6>
 326:	66 0f       	add	r22, r22
 328:	77 1f       	adc	r23, r23
 32a:	8a 95       	dec	r24
 32c:	e2 f7       	brpl	.-8      	; 0x326 <DIO_write+0xd2>
 32e:	cb 01       	movw	r24, r22
 330:	84 2b       	or	r24, r20
 332:	85 bb       	out	0x15, r24	; 21
 334:	80 e0       	ldi	r24, 0x00	; 0
 336:	08 95       	ret
 338:	41 11       	cpse	r20, r1
 33a:	0f c0       	rjmp	.+30     	; 0x35a <DIO_write+0x106>
 33c:	42 b3       	in	r20, 0x12	; 18
 33e:	21 e0       	ldi	r18, 0x01	; 1
 340:	30 e0       	ldi	r19, 0x00	; 0
 342:	b9 01       	movw	r22, r18
 344:	02 c0       	rjmp	.+4      	; 0x34a <DIO_write+0xf6>
 346:	66 0f       	add	r22, r22
 348:	77 1f       	adc	r23, r23
 34a:	8a 95       	dec	r24
 34c:	e2 f7       	brpl	.-8      	; 0x346 <DIO_write+0xf2>
 34e:	cb 01       	movw	r24, r22
 350:	80 95       	com	r24
 352:	84 23       	and	r24, r20
 354:	82 bb       	out	0x12, r24	; 18
 356:	80 e0       	ldi	r24, 0x00	; 0
 358:	08 95       	ret
 35a:	41 30       	cpi	r20, 0x01	; 1
 35c:	b1 f4       	brne	.+44     	; 0x38a <DIO_write+0x136>
 35e:	42 b3       	in	r20, 0x12	; 18
 360:	21 e0       	ldi	r18, 0x01	; 1
 362:	30 e0       	ldi	r19, 0x00	; 0
 364:	b9 01       	movw	r22, r18
 366:	02 c0       	rjmp	.+4      	; 0x36c <DIO_write+0x118>
 368:	66 0f       	add	r22, r22
 36a:	77 1f       	adc	r23, r23
 36c:	8a 95       	dec	r24
 36e:	e2 f7       	brpl	.-8      	; 0x368 <DIO_write+0x114>
 370:	cb 01       	movw	r24, r22
 372:	84 2b       	or	r24, r20
 374:	82 bb       	out	0x12, r24	; 18
 376:	80 e0       	ldi	r24, 0x00	; 0
 378:	08 95       	ret
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	08 95       	ret
 37e:	84 e0       	ldi	r24, 0x04	; 4
 380:	08 95       	ret
 382:	84 e0       	ldi	r24, 0x04	; 4
 384:	08 95       	ret
 386:	84 e0       	ldi	r24, 0x04	; 4
 388:	08 95       	ret
 38a:	84 e0       	ldi	r24, 0x04	; 4
 38c:	08 95       	ret

0000038e <DIO_read>:

EN_DIO_Error_t DIO_read(uint8_t pinNumber, uint8_t portNumber, uint8_t *value){
	switch(portNumber){
 38e:	62 34       	cpi	r22, 0x42	; 66
 390:	11 f1       	breq	.+68     	; 0x3d6 <DIO_read+0x48>
 392:	18 f4       	brcc	.+6      	; 0x39a <DIO_read+0xc>
 394:	61 34       	cpi	r22, 0x41	; 65
 396:	39 f0       	breq	.+14     	; 0x3a6 <DIO_read+0x18>
 398:	66 c0       	rjmp	.+204    	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
 39a:	63 34       	cpi	r22, 0x43	; 67
 39c:	a1 f1       	breq	.+104    	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 39e:	64 34       	cpi	r22, 0x44	; 68
 3a0:	09 f4       	brne	.+2      	; 0x3a4 <DIO_read+0x16>
 3a2:	49 c0       	rjmp	.+146    	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 3a4:	60 c0       	rjmp	.+192    	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
		case PORT_A:
		*value = (PINA&(1<<pinNumber))>>pinNumber;
 3a6:	99 b3       	in	r25, 0x19	; 25
 3a8:	21 e0       	ldi	r18, 0x01	; 1
 3aa:	30 e0       	ldi	r19, 0x00	; 0
 3ac:	b9 01       	movw	r22, r18
 3ae:	08 2e       	mov	r0, r24
 3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <DIO_read+0x28>
 3b2:	66 0f       	add	r22, r22
 3b4:	77 1f       	adc	r23, r23
 3b6:	0a 94       	dec	r0
 3b8:	e2 f7       	brpl	.-8      	; 0x3b2 <DIO_read+0x24>
 3ba:	29 2f       	mov	r18, r25
 3bc:	30 e0       	ldi	r19, 0x00	; 0
 3be:	26 23       	and	r18, r22
 3c0:	37 23       	and	r19, r23
 3c2:	b9 01       	movw	r22, r18
 3c4:	02 c0       	rjmp	.+4      	; 0x3ca <DIO_read+0x3c>
 3c6:	75 95       	asr	r23
 3c8:	67 95       	ror	r22
 3ca:	8a 95       	dec	r24
 3cc:	e2 f7       	brpl	.-8      	; 0x3c6 <DIO_read+0x38>
 3ce:	fa 01       	movw	r30, r20
 3d0:	60 83       	st	Z, r22
		return OK;
 3d2:	80 e0       	ldi	r24, 0x00	; 0
 3d4:	08 95       	ret
		break;
		case PORT_B:
		*value = (PINB&(1<<pinNumber))>>pinNumber;
 3d6:	96 b3       	in	r25, 0x16	; 22
 3d8:	21 e0       	ldi	r18, 0x01	; 1
 3da:	30 e0       	ldi	r19, 0x00	; 0
 3dc:	b9 01       	movw	r22, r18
 3de:	08 2e       	mov	r0, r24
 3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <DIO_read+0x58>
 3e2:	66 0f       	add	r22, r22
 3e4:	77 1f       	adc	r23, r23
 3e6:	0a 94       	dec	r0
 3e8:	e2 f7       	brpl	.-8      	; 0x3e2 <DIO_read+0x54>
 3ea:	29 2f       	mov	r18, r25
 3ec:	30 e0       	ldi	r19, 0x00	; 0
 3ee:	26 23       	and	r18, r22
 3f0:	37 23       	and	r19, r23
 3f2:	b9 01       	movw	r22, r18
 3f4:	02 c0       	rjmp	.+4      	; 0x3fa <DIO_read+0x6c>
 3f6:	75 95       	asr	r23
 3f8:	67 95       	ror	r22
 3fa:	8a 95       	dec	r24
 3fc:	e2 f7       	brpl	.-8      	; 0x3f6 <DIO_read+0x68>
 3fe:	fa 01       	movw	r30, r20
 400:	60 83       	st	Z, r22
		return OK;
 402:	80 e0       	ldi	r24, 0x00	; 0
 404:	08 95       	ret
		break;
		case PORT_C:
		*value = (PINC&(1<<pinNumber))>>pinNumber;
 406:	93 b3       	in	r25, 0x13	; 19
 408:	21 e0       	ldi	r18, 0x01	; 1
 40a:	30 e0       	ldi	r19, 0x00	; 0
 40c:	b9 01       	movw	r22, r18
 40e:	08 2e       	mov	r0, r24
 410:	02 c0       	rjmp	.+4      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 412:	66 0f       	add	r22, r22
 414:	77 1f       	adc	r23, r23
 416:	0a 94       	dec	r0
 418:	e2 f7       	brpl	.-8      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 41a:	29 2f       	mov	r18, r25
 41c:	30 e0       	ldi	r19, 0x00	; 0
 41e:	26 23       	and	r18, r22
 420:	37 23       	and	r19, r23
 422:	b9 01       	movw	r22, r18
 424:	02 c0       	rjmp	.+4      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 426:	75 95       	asr	r23
 428:	67 95       	ror	r22
 42a:	8a 95       	dec	r24
 42c:	e2 f7       	brpl	.-8      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 42e:	fa 01       	movw	r30, r20
 430:	60 83       	st	Z, r22
		return OK;
 432:	80 e0       	ldi	r24, 0x00	; 0
 434:	08 95       	ret
		break;
		case PORT_D:
		*value = (PIND&(1<<pinNumber))>>pinNumber;
 436:	90 b3       	in	r25, 0x10	; 16
 438:	21 e0       	ldi	r18, 0x01	; 1
 43a:	30 e0       	ldi	r19, 0x00	; 0
 43c:	b9 01       	movw	r22, r18
 43e:	08 2e       	mov	r0, r24
 440:	02 c0       	rjmp	.+4      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
 442:	66 0f       	add	r22, r22
 444:	77 1f       	adc	r23, r23
 446:	0a 94       	dec	r0
 448:	e2 f7       	brpl	.-8      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 44a:	29 2f       	mov	r18, r25
 44c:	30 e0       	ldi	r19, 0x00	; 0
 44e:	26 23       	and	r18, r22
 450:	37 23       	and	r19, r23
 452:	b9 01       	movw	r22, r18
 454:	02 c0       	rjmp	.+4      	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
 456:	75 95       	asr	r23
 458:	67 95       	ror	r22
 45a:	8a 95       	dec	r24
 45c:	e2 f7       	brpl	.-8      	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
 45e:	fa 01       	movw	r30, r20
 460:	60 83       	st	Z, r22
		return OK;
 462:	80 e0       	ldi	r24, 0x00	; 0
 464:	08 95       	ret
		break;
		default:
		return WRONG_PORT;
 466:	81 e0       	ldi	r24, 0x01	; 1
		break;
	}
}
 468:	08 95       	ret

0000046a <button_test>:
	while(1){
		PWM_set_value(50);	
	}
}

void button_test(){
 46a:	cf 93       	push	r28
 46c:	df 93       	push	r29
 46e:	1f 92       	push	r1
 470:	cd b7       	in	r28, 0x3d	; 61
 472:	de b7       	in	r29, 0x3e	; 62
	BUTTON_init(2, PORT_D);
 474:	64 e4       	ldi	r22, 0x44	; 68
 476:	82 e0       	ldi	r24, 0x02	; 2
 478:	0e 94 75 00 	call	0xea	; 0xea <BUTTON_init>
	LED_init(0, PORT_A);
 47c:	61 e4       	ldi	r22, 0x41	; 65
 47e:	80 e0       	ldi	r24, 0x00	; 0
 480:	0e 94 7c 00 	call	0xf8	; 0xf8 <LED_init>
	uint8_t button_value = 0;
 484:	19 82       	std	Y+1, r1	; 0x01
	while(1){
		BUTTON_read(2, PORT_D, &button_value);
 486:	ae 01       	movw	r20, r28
 488:	4f 5f       	subi	r20, 0xFF	; 255
 48a:	5f 4f       	sbci	r21, 0xFF	; 255
 48c:	64 e4       	ldi	r22, 0x44	; 68
 48e:	82 e0       	ldi	r24, 0x02	; 2
 490:	0e 94 79 00 	call	0xf2	; 0xf2 <BUTTON_read>
		button_value == LOW ?  LED_off(0, PORT_A) : LED_on(0, PORT_A);
 494:	89 81       	ldd	r24, Y+1	; 0x01
 496:	81 11       	cpse	r24, r1
 498:	04 c0       	rjmp	.+8      	; 0x4a2 <button_test+0x38>
 49a:	61 e4       	ldi	r22, 0x41	; 65
 49c:	0e 94 84 00 	call	0x108	; 0x108 <LED_off>
 4a0:	f2 cf       	rjmp	.-28     	; 0x486 <button_test+0x1c>
 4a2:	61 e4       	ldi	r22, 0x41	; 65
 4a4:	80 e0       	ldi	r24, 0x00	; 0
 4a6:	0e 94 80 00 	call	0x100	; 0x100 <LED_on>
 4aa:	ed cf       	rjmp	.-38     	; 0x486 <button_test+0x1c>

000004ac <_exit>:
 4ac:	f8 94       	cli

000004ae <__stop_program>:
 4ae:	ff cf       	rjmp	.-2      	; 0x4ae <__stop_program>
