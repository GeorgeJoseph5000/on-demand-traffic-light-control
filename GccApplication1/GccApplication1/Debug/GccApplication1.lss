
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ae6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000b5a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800060  00800060  00000b5a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b5a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b8c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  00000bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010e2  00000000  00000000  00000d00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000864  00000000  00000000  00001de2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a20  00000000  00000000  00002646  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000024c  00000000  00000000  00003068  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000544  00000000  00000000  000032b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000aa6  00000000  00000000  000037f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  0000429e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a3 36       	cpi	r26, 0x63	; 99
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 54 01 	call	0x2a8	; 0x2a8 <main>
  74:	0c 94 71 05 	jmp	0xae2	; 0xae2 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <setCurrentCarState>:

void setCurrentCarState(uint8_t state){
	current_car_state = state;
}

void nothing(){return;}
  7c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <current_car_state>
  80:	08 95       	ret

00000082 <setPedestrianMode>:
void setPedestrianMode(uint8_t mode){pedestrian_mode = mode;}
  82:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <pedestrian_mode>
  86:	08 95       	ret

00000088 <setDoneOnce>:
void setDoneOnce(uint8_t number){doneOnce = number;}
  88:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  8c:	08 95       	ret

0000008e <greenState>:

void greenState(){
	LED_on(GREEN, PORT_CAR);
  8e:	61 e4       	ldi	r22, 0x41	; 65
  90:	80 e0       	ldi	r24, 0x00	; 0
  92:	0e 94 49 01 	call	0x292	; 0x292 <LED_on>
	pedestrian_mode == 1 ? LED_on(RED, PORT_PEDESTRIAN) : setCurrentCarState(0);
  96:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <pedestrian_mode>
  9a:	81 30       	cpi	r24, 0x01	; 1
  9c:	29 f4       	brne	.+10     	; 0xa8 <greenState+0x1a>
  9e:	62 e4       	ldi	r22, 0x42	; 66
  a0:	82 e0       	ldi	r24, 0x02	; 2
  a2:	0e 94 49 01 	call	0x292	; 0x292 <LED_on>
  a6:	03 c0       	rjmp	.+6      	; 0xae <greenState+0x20>
  a8:	80 e0       	ldi	r24, 0x00	; 0
  aa:	0e 94 3e 00 	call	0x7c	; 0x7c <setCurrentCarState>
	TIMER_delay(WAITING_TIME);
  ae:	88 e8       	ldi	r24, 0x88	; 136
  b0:	93 e1       	ldi	r25, 0x13	; 19
  b2:	0e 94 ae 02 	call	0x55c	; 0x55c <TIMER_delay>
	LED_off(GREEN, PORT_CAR);
  b6:	61 e4       	ldi	r22, 0x41	; 65
  b8:	80 e0       	ldi	r24, 0x00	; 0
  ba:	0e 94 4d 01 	call	0x29a	; 0x29a <LED_off>
	pedestrian_mode == 1 ? LED_off(RED, PORT_PEDESTRIAN) : setCurrentCarState(0);
  be:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <pedestrian_mode>
  c2:	81 30       	cpi	r24, 0x01	; 1
  c4:	29 f4       	brne	.+10     	; 0xd0 <greenState+0x42>
  c6:	62 e4       	ldi	r22, 0x42	; 66
  c8:	82 e0       	ldi	r24, 0x02	; 2
  ca:	0e 94 4d 01 	call	0x29a	; 0x29a <LED_off>
  ce:	03 c0       	rjmp	.+6      	; 0xd6 <greenState+0x48>
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	0e 94 3e 00 	call	0x7c	; 0x7c <setCurrentCarState>
	doneOnce = 0;
  d6:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
  da:	08 95       	ret

000000dc <yellowState>:
}

void yellowState(){
  dc:	cf 93       	push	r28
	uint8_t blinks = 1;
  de:	c1 e0       	ldi	r28, 0x01	; 1
	while(blinks <= (YELLOW_BLINKS*2)){
  e0:	14 c0       	rjmp	.+40     	; 0x10a <yellowState+0x2e>
		LED_toggle(YELLOW, PORT_CAR);
  e2:	61 e4       	ldi	r22, 0x41	; 65
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LED_toggle>
		pedestrian_mode == 1 ? LED_toggle(YELLOW, PORT_PEDESTRIAN) : setCurrentCarState(1);
  ea:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <pedestrian_mode>
  ee:	81 30       	cpi	r24, 0x01	; 1
  f0:	21 f4       	brne	.+8      	; 0xfa <yellowState+0x1e>
  f2:	62 e4       	ldi	r22, 0x42	; 66
  f4:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LED_toggle>
  f8:	03 c0       	rjmp	.+6      	; 0x100 <yellowState+0x24>
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	0e 94 3e 00 	call	0x7c	; 0x7c <setCurrentCarState>
		TIMER_delay(WAITING_TIME/YELLOW_BLINKS);
 100:	88 ee       	ldi	r24, 0xE8	; 232
 102:	93 e0       	ldi	r25, 0x03	; 3
 104:	0e 94 ae 02 	call	0x55c	; 0x55c <TIMER_delay>
		blinks++;
 108:	cf 5f       	subi	r28, 0xFF	; 255
	doneOnce = 0;
}

void yellowState(){
	uint8_t blinks = 1;
	while(blinks <= (YELLOW_BLINKS*2)){
 10a:	cb 30       	cpi	r28, 0x0B	; 11
 10c:	50 f3       	brcs	.-44     	; 0xe2 <yellowState+0x6>
		LED_toggle(YELLOW, PORT_CAR);
		pedestrian_mode == 1 ? LED_toggle(YELLOW, PORT_PEDESTRIAN) : setCurrentCarState(1);
		TIMER_delay(WAITING_TIME/YELLOW_BLINKS);
		blinks++;
	}
	LED_off(YELLOW, PORT_CAR);
 10e:	61 e4       	ldi	r22, 0x41	; 65
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	0e 94 4d 01 	call	0x29a	; 0x29a <LED_off>
	pedestrian_mode == 1 ? LED_off(YELLOW, PORT_PEDESTRIAN) : setCurrentCarState(1);
 116:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <pedestrian_mode>
 11a:	81 30       	cpi	r24, 0x01	; 1
 11c:	21 f4       	brne	.+8      	; 0x126 <yellowState+0x4a>
 11e:	62 e4       	ldi	r22, 0x42	; 66
 120:	0e 94 4d 01 	call	0x29a	; 0x29a <LED_off>
 124:	03 c0       	rjmp	.+6      	; 0x12c <yellowState+0x50>
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	0e 94 3e 00 	call	0x7c	; 0x7c <setCurrentCarState>
}
 12c:	cf 91       	pop	r28
 12e:	08 95       	ret

00000130 <redState>:

void redState(){
	LED_on(RED, PORT_CAR);
 130:	61 e4       	ldi	r22, 0x41	; 65
 132:	82 e0       	ldi	r24, 0x02	; 2
 134:	0e 94 49 01 	call	0x292	; 0x292 <LED_on>
	pedestrian_mode == 1 ? LED_on(GREEN, PORT_PEDESTRIAN) : setCurrentCarState(2);
 138:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <pedestrian_mode>
 13c:	81 30       	cpi	r24, 0x01	; 1
 13e:	29 f4       	brne	.+10     	; 0x14a <redState+0x1a>
 140:	62 e4       	ldi	r22, 0x42	; 66
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	0e 94 49 01 	call	0x292	; 0x292 <LED_on>
 148:	03 c0       	rjmp	.+6      	; 0x150 <redState+0x20>
 14a:	82 e0       	ldi	r24, 0x02	; 2
 14c:	0e 94 3e 00 	call	0x7c	; 0x7c <setCurrentCarState>
	TIMER_delay(WAITING_TIME);
 150:	88 e8       	ldi	r24, 0x88	; 136
 152:	93 e1       	ldi	r25, 0x13	; 19
 154:	0e 94 ae 02 	call	0x55c	; 0x55c <TIMER_delay>
	LED_off(RED, PORT_CAR);
 158:	61 e4       	ldi	r22, 0x41	; 65
 15a:	82 e0       	ldi	r24, 0x02	; 2
 15c:	0e 94 4d 01 	call	0x29a	; 0x29a <LED_off>
	pedestrian_mode == 1 ? LED_off(GREEN, PORT_PEDESTRIAN) : setCurrentCarState(2);
 160:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <pedestrian_mode>
 164:	81 30       	cpi	r24, 0x01	; 1
 166:	29 f4       	brne	.+10     	; 0x172 <redState+0x42>
 168:	62 e4       	ldi	r22, 0x42	; 66
 16a:	80 e0       	ldi	r24, 0x00	; 0
 16c:	0e 94 4d 01 	call	0x29a	; 0x29a <LED_off>
 170:	03 c0       	rjmp	.+6      	; 0x178 <redState+0x48>
 172:	82 e0       	ldi	r24, 0x02	; 2
 174:	0e 94 3e 00 	call	0x7c	; 0x7c <setCurrentCarState>
	(doneOnce == 1) ? setPedestrianMode(0) : nothing();
 178:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 17c:	81 30       	cpi	r24, 0x01	; 1
 17e:	19 f4       	brne	.+6      	; 0x186 <redState+0x56>
 180:	80 e0       	ldi	r24, 0x00	; 0
 182:	0e 94 41 00 	call	0x82	; 0x82 <setPedestrianMode>
 186:	08 95       	ret

00000188 <app_start>:
}


void app_start(){
	LED_init(GREEN, PORT_CAR);
 188:	61 e4       	ldi	r22, 0x41	; 65
 18a:	80 e0       	ldi	r24, 0x00	; 0
 18c:	0e 94 45 01 	call	0x28a	; 0x28a <LED_init>
	LED_init(YELLOW, PORT_CAR);
 190:	61 e4       	ldi	r22, 0x41	; 65
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	0e 94 45 01 	call	0x28a	; 0x28a <LED_init>
	LED_init(RED, PORT_CAR);
 198:	61 e4       	ldi	r22, 0x41	; 65
 19a:	82 e0       	ldi	r24, 0x02	; 2
 19c:	0e 94 45 01 	call	0x28a	; 0x28a <LED_init>
	
	LED_init(GREEN, PORT_PEDESTRIAN);
 1a0:	62 e4       	ldi	r22, 0x42	; 66
 1a2:	80 e0       	ldi	r24, 0x00	; 0
 1a4:	0e 94 45 01 	call	0x28a	; 0x28a <LED_init>
	LED_init(YELLOW, PORT_PEDESTRIAN);
 1a8:	62 e4       	ldi	r22, 0x42	; 66
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	0e 94 45 01 	call	0x28a	; 0x28a <LED_init>
	LED_init(RED, PORT_PEDESTRIAN);
 1b0:	62 e4       	ldi	r22, 0x42	; 66
 1b2:	82 e0       	ldi	r24, 0x02	; 2
 1b4:	0e 94 45 01 	call	0x28a	; 0x28a <LED_init>
	
	BUTTON_init(2, PORT_D);
 1b8:	64 e4       	ldi	r22, 0x44	; 68
 1ba:	82 e0       	ldi	r24, 0x02	; 2
 1bc:	0e 94 41 01 	call	0x282	; 0x282 <BUTTON_init>
	
	// Interrupt Setup
	CLEAR_BIT(DDRD, 2);
 1c0:	81 b3       	in	r24, 0x11	; 17
 1c2:	8b 7f       	andi	r24, 0xFB	; 251
 1c4:	81 bb       	out	0x11, r24	; 17
	sei();
 1c6:	78 94       	sei
	SET_BIT(MCUCR, 0);
 1c8:	85 b7       	in	r24, 0x35	; 53
 1ca:	81 60       	ori	r24, 0x01	; 1
 1cc:	85 bf       	out	0x35, r24	; 53
	SET_BIT(MCUCR, 1);
 1ce:	85 b7       	in	r24, 0x35	; 53
 1d0:	82 60       	ori	r24, 0x02	; 2
 1d2:	85 bf       	out	0x35, r24	; 53
	SET_BIT(GICR, 6);
 1d4:	8b b7       	in	r24, 0x3b	; 59
 1d6:	80 64       	ori	r24, 0x40	; 64
 1d8:	8b bf       	out	0x3b, r24	; 59
	
	while(1){
		greenState();
 1da:	0e 94 47 00 	call	0x8e	; 0x8e <greenState>
		yellowState();
 1de:	0e 94 6e 00 	call	0xdc	; 0xdc <yellowState>
		(pedestrian_mode == 1) ? setDoneOnce(1) : nothing();
 1e2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <pedestrian_mode>
 1e6:	81 30       	cpi	r24, 0x01	; 1
 1e8:	11 f4       	brne	.+4      	; 0x1ee <app_start+0x66>
 1ea:	0e 94 44 00 	call	0x88	; 0x88 <setDoneOnce>
		redState();
 1ee:	0e 94 98 00 	call	0x130	; 0x130 <redState>
		yellowState();
 1f2:	0e 94 6e 00 	call	0xdc	; 0xdc <yellowState>
		if((pedestrian_mode == 1) && (doneOnce == 0)) {
 1f6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <pedestrian_mode>
 1fa:	81 30       	cpi	r24, 0x01	; 1
 1fc:	71 f7       	brne	.-36     	; 0x1da <app_start+0x52>
 1fe:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 202:	81 11       	cpse	r24, r1
 204:	ea cf       	rjmp	.-44     	; 0x1da <app_start+0x52>
			redState();
 206:	0e 94 98 00 	call	0x130	; 0x130 <redState>
			pedestrian_mode = 0;
 20a:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <pedestrian_mode>
			yellowState();
 20e:	0e 94 6e 00 	call	0xdc	; 0xdc <yellowState>
 212:	e3 cf       	rjmp	.-58     	; 0x1da <app_start+0x52>

00000214 <__vector_1>:
	}
	
}


ISR(INT0_vect){
 214:	1f 92       	push	r1
 216:	0f 92       	push	r0
 218:	0f b6       	in	r0, 0x3f	; 63
 21a:	0f 92       	push	r0
 21c:	11 24       	eor	r1, r1
 21e:	2f 93       	push	r18
 220:	3f 93       	push	r19
 222:	4f 93       	push	r20
 224:	5f 93       	push	r21
 226:	6f 93       	push	r22
 228:	7f 93       	push	r23
 22a:	8f 93       	push	r24
 22c:	9f 93       	push	r25
 22e:	af 93       	push	r26
 230:	bf 93       	push	r27
 232:	ef 93       	push	r30
 234:	ff 93       	push	r31
	if(pedestrian_mode == 0){
 236:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <pedestrian_mode>
 23a:	81 11       	cpse	r24, r1
 23c:	11 c0       	rjmp	.+34     	; 0x260 <__vector_1+0x4c>
		pedestrian_mode = 1;
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <pedestrian_mode>
		uint8_t color = 0;
		switch (current_car_state){
 244:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <current_car_state>
 248:	88 23       	and	r24, r24
 24a:	21 f0       	breq	.+8      	; 0x254 <__vector_1+0x40>
 24c:	81 30       	cpi	r24, 0x01	; 1
 24e:	21 f0       	breq	.+8      	; 0x258 <__vector_1+0x44>


ISR(INT0_vect){
	if(pedestrian_mode == 0){
		pedestrian_mode = 1;
		uint8_t color = 0;
 250:	80 e0       	ldi	r24, 0x00	; 0
 252:	03 c0       	rjmp	.+6      	; 0x25a <__vector_1+0x46>
			break;
			case YELLOW:
				color = YELLOW;
			break;
			case GREEN:
				color = RED;
 254:	82 e0       	ldi	r24, 0x02	; 2
			break;
 256:	01 c0       	rjmp	.+2      	; 0x25a <__vector_1+0x46>
		switch (current_car_state){
			case RED:
				color = GREEN;
			break;
			case YELLOW:
				color = YELLOW;
 258:	81 e0       	ldi	r24, 0x01	; 1
			case GREEN:
				color = RED;
			break;
				
		}
		LED_on(color, PORT_PEDESTRIAN);
 25a:	62 e4       	ldi	r22, 0x42	; 66
 25c:	0e 94 49 01 	call	0x292	; 0x292 <LED_on>
	}
 260:	ff 91       	pop	r31
 262:	ef 91       	pop	r30
 264:	bf 91       	pop	r27
 266:	af 91       	pop	r26
 268:	9f 91       	pop	r25
 26a:	8f 91       	pop	r24
 26c:	7f 91       	pop	r23
 26e:	6f 91       	pop	r22
 270:	5f 91       	pop	r21
 272:	4f 91       	pop	r20
 274:	3f 91       	pop	r19
 276:	2f 91       	pop	r18
 278:	0f 90       	pop	r0
 27a:	0f be       	out	0x3f, r0	; 63
 27c:	0f 90       	pop	r0
 27e:	1f 90       	pop	r1
 280:	18 95       	reti

00000282 <BUTTON_init>:
#include "button.h"


void BUTTON_init(uint8_t pinNumber, uint8_t portNumber){
	DIO_init(pinNumber, portNumber, IN);
 282:	40 e0       	ldi	r20, 0x00	; 0
 284:	0e 94 59 01 	call	0x2b2	; 0x2b2 <DIO_init>
 288:	08 95       	ret

0000028a <LED_init>:
#include "led.h"

void LED_init(uint8_t pinNumber, uint8_t portNumber){
	DIO_init(pinNumber, portNumber, OUT);
 28a:	41 e0       	ldi	r20, 0x01	; 1
 28c:	0e 94 59 01 	call	0x2b2	; 0x2b2 <DIO_init>
 290:	08 95       	ret

00000292 <LED_on>:
}

void LED_on(uint8_t pinNumber, uint8_t portNumber){
	DIO_write(pinNumber, portNumber, HIGH);
 292:	41 e0       	ldi	r20, 0x01	; 1
 294:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <DIO_write>
 298:	08 95       	ret

0000029a <LED_off>:
}

void LED_off(uint8_t pinNumber, uint8_t portNumber){
	DIO_write(pinNumber, portNumber, LOW);
 29a:	40 e0       	ldi	r20, 0x00	; 0
 29c:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <DIO_write>
 2a0:	08 95       	ret

000002a2 <LED_toggle>:
}

void LED_toggle(uint8_t pinNumber, uint8_t portNumber){
	DIO_toggle(pinNumber, portNumber);
 2a2:	0e 94 6f 02 	call	0x4de	; 0x4de <DIO_toggle>
 2a6:	08 95       	ret

000002a8 <main>:
#include "Application/application.h"


int main(void)
{
	app_start();
 2a8:	0e 94 c4 00 	call	0x188	; 0x188 <app_start>
}
 2ac:	80 e0       	ldi	r24, 0x00	; 0
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	08 95       	ret

000002b2 <DIO_init>:
#include "dio.h"

void DIO_init(uint8_t pinNumber, uint8_t portNumber, uint8_t direction){
	switch (portNumber){
 2b2:	62 34       	cpi	r22, 0x42	; 66
 2b4:	59 f1       	breq	.+86     	; 0x30c <DIO_init+0x5a>
 2b6:	18 f4       	brcc	.+6      	; 0x2be <DIO_init+0xc>
 2b8:	61 34       	cpi	r22, 0x41	; 65
 2ba:	41 f0       	breq	.+16     	; 0x2cc <DIO_init+0x1a>
 2bc:	08 95       	ret
 2be:	63 34       	cpi	r22, 0x43	; 67
 2c0:	09 f4       	brne	.+2      	; 0x2c4 <DIO_init+0x12>
 2c2:	44 c0       	rjmp	.+136    	; 0x34c <DIO_init+0x9a>
 2c4:	64 34       	cpi	r22, 0x44	; 68
 2c6:	09 f4       	brne	.+2      	; 0x2ca <DIO_init+0x18>
 2c8:	60 c0       	rjmp	.+192    	; 0x38a <DIO_init+0xd8>
 2ca:	08 95       	ret
		case 'A':
			if(direction == IN){
 2cc:	41 11       	cpse	r20, r1
 2ce:	0e c0       	rjmp	.+28     	; 0x2ec <DIO_init+0x3a>
				CLEAR_BIT(DDRA, pinNumber);
 2d0:	4a b3       	in	r20, 0x1a	; 26
 2d2:	21 e0       	ldi	r18, 0x01	; 1
 2d4:	30 e0       	ldi	r19, 0x00	; 0
 2d6:	b9 01       	movw	r22, r18
 2d8:	02 c0       	rjmp	.+4      	; 0x2de <DIO_init+0x2c>
 2da:	66 0f       	add	r22, r22
 2dc:	77 1f       	adc	r23, r23
 2de:	8a 95       	dec	r24
 2e0:	e2 f7       	brpl	.-8      	; 0x2da <DIO_init+0x28>
 2e2:	cb 01       	movw	r24, r22
 2e4:	80 95       	com	r24
 2e6:	84 23       	and	r24, r20
 2e8:	8a bb       	out	0x1a, r24	; 26
 2ea:	08 95       	ret
			}else if(direction == OUT){
 2ec:	41 30       	cpi	r20, 0x01	; 1
 2ee:	09 f0       	breq	.+2      	; 0x2f2 <DIO_init+0x40>
 2f0:	6a c0       	rjmp	.+212    	; 0x3c6 <DIO_init+0x114>
				SET_BIT(DDRA, pinNumber);
 2f2:	4a b3       	in	r20, 0x1a	; 26
 2f4:	21 e0       	ldi	r18, 0x01	; 1
 2f6:	30 e0       	ldi	r19, 0x00	; 0
 2f8:	b9 01       	movw	r22, r18
 2fa:	02 c0       	rjmp	.+4      	; 0x300 <DIO_init+0x4e>
 2fc:	66 0f       	add	r22, r22
 2fe:	77 1f       	adc	r23, r23
 300:	8a 95       	dec	r24
 302:	e2 f7       	brpl	.-8      	; 0x2fc <DIO_init+0x4a>
 304:	cb 01       	movw	r24, r22
 306:	84 2b       	or	r24, r20
 308:	8a bb       	out	0x1a, r24	; 26
 30a:	08 95       	ret
			}else{
				// error handling
			}
		break;
		case 'B':
			if(direction == IN){
 30c:	41 11       	cpse	r20, r1
 30e:	0e c0       	rjmp	.+28     	; 0x32c <DIO_init+0x7a>
				CLEAR_BIT(DDRB, pinNumber);
 310:	47 b3       	in	r20, 0x17	; 23
 312:	21 e0       	ldi	r18, 0x01	; 1
 314:	30 e0       	ldi	r19, 0x00	; 0
 316:	b9 01       	movw	r22, r18
 318:	02 c0       	rjmp	.+4      	; 0x31e <DIO_init+0x6c>
 31a:	66 0f       	add	r22, r22
 31c:	77 1f       	adc	r23, r23
 31e:	8a 95       	dec	r24
 320:	e2 f7       	brpl	.-8      	; 0x31a <DIO_init+0x68>
 322:	cb 01       	movw	r24, r22
 324:	80 95       	com	r24
 326:	84 23       	and	r24, r20
 328:	87 bb       	out	0x17, r24	; 23
 32a:	08 95       	ret
			}else if(direction == OUT){
 32c:	41 30       	cpi	r20, 0x01	; 1
 32e:	09 f0       	breq	.+2      	; 0x332 <DIO_init+0x80>
 330:	4a c0       	rjmp	.+148    	; 0x3c6 <DIO_init+0x114>
				SET_BIT(DDRB, pinNumber);
 332:	47 b3       	in	r20, 0x17	; 23
 334:	21 e0       	ldi	r18, 0x01	; 1
 336:	30 e0       	ldi	r19, 0x00	; 0
 338:	b9 01       	movw	r22, r18
 33a:	02 c0       	rjmp	.+4      	; 0x340 <DIO_init+0x8e>
 33c:	66 0f       	add	r22, r22
 33e:	77 1f       	adc	r23, r23
 340:	8a 95       	dec	r24
 342:	e2 f7       	brpl	.-8      	; 0x33c <DIO_init+0x8a>
 344:	cb 01       	movw	r24, r22
 346:	84 2b       	or	r24, r20
 348:	87 bb       	out	0x17, r24	; 23
 34a:	08 95       	ret
			}else{
				// error handling
			}
		break;
		case 'C':
			if(direction == IN){
 34c:	41 11       	cpse	r20, r1
 34e:	0e c0       	rjmp	.+28     	; 0x36c <DIO_init+0xba>
				CLEAR_BIT(DDRC, pinNumber);
 350:	44 b3       	in	r20, 0x14	; 20
 352:	21 e0       	ldi	r18, 0x01	; 1
 354:	30 e0       	ldi	r19, 0x00	; 0
 356:	b9 01       	movw	r22, r18
 358:	02 c0       	rjmp	.+4      	; 0x35e <DIO_init+0xac>
 35a:	66 0f       	add	r22, r22
 35c:	77 1f       	adc	r23, r23
 35e:	8a 95       	dec	r24
 360:	e2 f7       	brpl	.-8      	; 0x35a <DIO_init+0xa8>
 362:	cb 01       	movw	r24, r22
 364:	80 95       	com	r24
 366:	84 23       	and	r24, r20
 368:	84 bb       	out	0x14, r24	; 20
 36a:	08 95       	ret
			}else if(direction == OUT){
 36c:	41 30       	cpi	r20, 0x01	; 1
 36e:	59 f5       	brne	.+86     	; 0x3c6 <DIO_init+0x114>
				SET_BIT(DDRC, pinNumber);
 370:	44 b3       	in	r20, 0x14	; 20
 372:	21 e0       	ldi	r18, 0x01	; 1
 374:	30 e0       	ldi	r19, 0x00	; 0
 376:	b9 01       	movw	r22, r18
 378:	02 c0       	rjmp	.+4      	; 0x37e <DIO_init+0xcc>
 37a:	66 0f       	add	r22, r22
 37c:	77 1f       	adc	r23, r23
 37e:	8a 95       	dec	r24
 380:	e2 f7       	brpl	.-8      	; 0x37a <DIO_init+0xc8>
 382:	cb 01       	movw	r24, r22
 384:	84 2b       	or	r24, r20
 386:	84 bb       	out	0x14, r24	; 20
 388:	08 95       	ret
			}else{
				// error handling
			}
		break;
		case 'D':
			if(direction == IN){
 38a:	41 11       	cpse	r20, r1
 38c:	0e c0       	rjmp	.+28     	; 0x3aa <DIO_init+0xf8>
				CLEAR_BIT(DDRD, pinNumber);
 38e:	41 b3       	in	r20, 0x11	; 17
 390:	21 e0       	ldi	r18, 0x01	; 1
 392:	30 e0       	ldi	r19, 0x00	; 0
 394:	b9 01       	movw	r22, r18
 396:	02 c0       	rjmp	.+4      	; 0x39c <DIO_init+0xea>
 398:	66 0f       	add	r22, r22
 39a:	77 1f       	adc	r23, r23
 39c:	8a 95       	dec	r24
 39e:	e2 f7       	brpl	.-8      	; 0x398 <DIO_init+0xe6>
 3a0:	cb 01       	movw	r24, r22
 3a2:	80 95       	com	r24
 3a4:	84 23       	and	r24, r20
 3a6:	81 bb       	out	0x11, r24	; 17
 3a8:	08 95       	ret
			}else if(direction == OUT){
 3aa:	41 30       	cpi	r20, 0x01	; 1
 3ac:	61 f4       	brne	.+24     	; 0x3c6 <DIO_init+0x114>
				SET_BIT(DDRD, pinNumber);
 3ae:	41 b3       	in	r20, 0x11	; 17
 3b0:	21 e0       	ldi	r18, 0x01	; 1
 3b2:	30 e0       	ldi	r19, 0x00	; 0
 3b4:	b9 01       	movw	r22, r18
 3b6:	02 c0       	rjmp	.+4      	; 0x3bc <DIO_init+0x10a>
 3b8:	66 0f       	add	r22, r22
 3ba:	77 1f       	adc	r23, r23
 3bc:	8a 95       	dec	r24
 3be:	e2 f7       	brpl	.-8      	; 0x3b8 <DIO_init+0x106>
 3c0:	cb 01       	movw	r24, r22
 3c2:	84 2b       	or	r24, r20
 3c4:	81 bb       	out	0x11, r24	; 17
 3c6:	08 95       	ret

000003c8 <DIO_write>:
		break;
	}
}

void DIO_write(uint8_t pinNumber, uint8_t portNumber, uint8_t value){
	switch (portNumber){
 3c8:	62 34       	cpi	r22, 0x42	; 66
 3ca:	59 f1       	breq	.+86     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 3cc:	18 f4       	brcc	.+6      	; 0x3d4 <DIO_write+0xc>
 3ce:	61 34       	cpi	r22, 0x41	; 65
 3d0:	41 f0       	breq	.+16     	; 0x3e2 <DIO_write+0x1a>
 3d2:	08 95       	ret
 3d4:	63 34       	cpi	r22, 0x43	; 67
 3d6:	09 f4       	brne	.+2      	; 0x3da <DIO_write+0x12>
 3d8:	44 c0       	rjmp	.+136    	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
 3da:	64 34       	cpi	r22, 0x44	; 68
 3dc:	09 f4       	brne	.+2      	; 0x3e0 <DIO_write+0x18>
 3de:	60 c0       	rjmp	.+192    	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
 3e0:	08 95       	ret
		case 'A':
			if(value == LOW){
 3e2:	41 11       	cpse	r20, r1
 3e4:	0e c0       	rjmp	.+28     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
				CLEAR_BIT(PORTA, pinNumber);
 3e6:	4b b3       	in	r20, 0x1b	; 27
 3e8:	21 e0       	ldi	r18, 0x01	; 1
 3ea:	30 e0       	ldi	r19, 0x00	; 0
 3ec:	b9 01       	movw	r22, r18
 3ee:	02 c0       	rjmp	.+4      	; 0x3f4 <DIO_write+0x2c>
 3f0:	66 0f       	add	r22, r22
 3f2:	77 1f       	adc	r23, r23
 3f4:	8a 95       	dec	r24
 3f6:	e2 f7       	brpl	.-8      	; 0x3f0 <DIO_write+0x28>
 3f8:	cb 01       	movw	r24, r22
 3fa:	80 95       	com	r24
 3fc:	84 23       	and	r24, r20
 3fe:	8b bb       	out	0x1b, r24	; 27
 400:	08 95       	ret
			}else if(value == HIGH){
 402:	41 30       	cpi	r20, 0x01	; 1
 404:	09 f0       	breq	.+2      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 406:	6a c0       	rjmp	.+212    	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
				SET_BIT(PORTA, pinNumber);
 408:	4b b3       	in	r20, 0x1b	; 27
 40a:	21 e0       	ldi	r18, 0x01	; 1
 40c:	30 e0       	ldi	r19, 0x00	; 0
 40e:	b9 01       	movw	r22, r18
 410:	02 c0       	rjmp	.+4      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 412:	66 0f       	add	r22, r22
 414:	77 1f       	adc	r23, r23
 416:	8a 95       	dec	r24
 418:	e2 f7       	brpl	.-8      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 41a:	cb 01       	movw	r24, r22
 41c:	84 2b       	or	r24, r20
 41e:	8b bb       	out	0x1b, r24	; 27
 420:	08 95       	ret
			}else{
				// error handling
			}
		break;
		case 'B':
			if(value == LOW){
 422:	41 11       	cpse	r20, r1
 424:	0e c0       	rjmp	.+28     	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
				CLEAR_BIT(PORTB, pinNumber);
 426:	48 b3       	in	r20, 0x18	; 24
 428:	21 e0       	ldi	r18, 0x01	; 1
 42a:	30 e0       	ldi	r19, 0x00	; 0
 42c:	b9 01       	movw	r22, r18
 42e:	02 c0       	rjmp	.+4      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 430:	66 0f       	add	r22, r22
 432:	77 1f       	adc	r23, r23
 434:	8a 95       	dec	r24
 436:	e2 f7       	brpl	.-8      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 438:	cb 01       	movw	r24, r22
 43a:	80 95       	com	r24
 43c:	84 23       	and	r24, r20
 43e:	88 bb       	out	0x18, r24	; 24
 440:	08 95       	ret
			}else if(value == HIGH){
 442:	41 30       	cpi	r20, 0x01	; 1
 444:	09 f0       	breq	.+2      	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 446:	4a c0       	rjmp	.+148    	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
				SET_BIT(PORTB, pinNumber);
 448:	48 b3       	in	r20, 0x18	; 24
 44a:	21 e0       	ldi	r18, 0x01	; 1
 44c:	30 e0       	ldi	r19, 0x00	; 0
 44e:	b9 01       	movw	r22, r18
 450:	02 c0       	rjmp	.+4      	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
 452:	66 0f       	add	r22, r22
 454:	77 1f       	adc	r23, r23
 456:	8a 95       	dec	r24
 458:	e2 f7       	brpl	.-8      	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
 45a:	cb 01       	movw	r24, r22
 45c:	84 2b       	or	r24, r20
 45e:	88 bb       	out	0x18, r24	; 24
 460:	08 95       	ret
			}else{
				// error handling
			}
		break;
		case 'C':
			if(value == LOW){
 462:	41 11       	cpse	r20, r1
 464:	0e c0       	rjmp	.+28     	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
				CLEAR_BIT(PORTC, pinNumber);
 466:	45 b3       	in	r20, 0x15	; 21
 468:	21 e0       	ldi	r18, 0x01	; 1
 46a:	30 e0       	ldi	r19, 0x00	; 0
 46c:	b9 01       	movw	r22, r18
 46e:	02 c0       	rjmp	.+4      	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
 470:	66 0f       	add	r22, r22
 472:	77 1f       	adc	r23, r23
 474:	8a 95       	dec	r24
 476:	e2 f7       	brpl	.-8      	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
 478:	cb 01       	movw	r24, r22
 47a:	80 95       	com	r24
 47c:	84 23       	and	r24, r20
 47e:	85 bb       	out	0x15, r24	; 21
 480:	08 95       	ret
			}else if(value == HIGH){
 482:	41 30       	cpi	r20, 0x01	; 1
 484:	59 f5       	brne	.+86     	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
				SET_BIT(PORTC, pinNumber);
 486:	45 b3       	in	r20, 0x15	; 21
 488:	21 e0       	ldi	r18, 0x01	; 1
 48a:	30 e0       	ldi	r19, 0x00	; 0
 48c:	b9 01       	movw	r22, r18
 48e:	02 c0       	rjmp	.+4      	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
 490:	66 0f       	add	r22, r22
 492:	77 1f       	adc	r23, r23
 494:	8a 95       	dec	r24
 496:	e2 f7       	brpl	.-8      	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
 498:	cb 01       	movw	r24, r22
 49a:	84 2b       	or	r24, r20
 49c:	85 bb       	out	0x15, r24	; 21
 49e:	08 95       	ret
			}else{
				// error handling
			}
		break;
		case 'D':
			if(value == LOW){
 4a0:	41 11       	cpse	r20, r1
 4a2:	0e c0       	rjmp	.+28     	; 0x4c0 <__EEPROM_REGION_LENGTH__+0xc0>
				CLEAR_BIT(PORTD, pinNumber);
 4a4:	42 b3       	in	r20, 0x12	; 18
 4a6:	21 e0       	ldi	r18, 0x01	; 1
 4a8:	30 e0       	ldi	r19, 0x00	; 0
 4aa:	b9 01       	movw	r22, r18
 4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
 4ae:	66 0f       	add	r22, r22
 4b0:	77 1f       	adc	r23, r23
 4b2:	8a 95       	dec	r24
 4b4:	e2 f7       	brpl	.-8      	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
 4b6:	cb 01       	movw	r24, r22
 4b8:	80 95       	com	r24
 4ba:	84 23       	and	r24, r20
 4bc:	82 bb       	out	0x12, r24	; 18
 4be:	08 95       	ret
			}else if(value == HIGH){
 4c0:	41 30       	cpi	r20, 0x01	; 1
 4c2:	61 f4       	brne	.+24     	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
				SET_BIT(PORTD, pinNumber);
 4c4:	42 b3       	in	r20, 0x12	; 18
 4c6:	21 e0       	ldi	r18, 0x01	; 1
 4c8:	30 e0       	ldi	r19, 0x00	; 0
 4ca:	b9 01       	movw	r22, r18
 4cc:	02 c0       	rjmp	.+4      	; 0x4d2 <__EEPROM_REGION_LENGTH__+0xd2>
 4ce:	66 0f       	add	r22, r22
 4d0:	77 1f       	adc	r23, r23
 4d2:	8a 95       	dec	r24
 4d4:	e2 f7       	brpl	.-8      	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
 4d6:	cb 01       	movw	r24, r22
 4d8:	84 2b       	or	r24, r20
 4da:	82 bb       	out	0x12, r24	; 18
 4dc:	08 95       	ret

000004de <DIO_toggle>:
		break;
	}
}

void DIO_toggle(uint8_t pinNumber, uint8_t portNumber){
	switch(portNumber){
 4de:	62 34       	cpi	r22, 0x42	; 66
 4e0:	b1 f0       	breq	.+44     	; 0x50e <DIO_toggle+0x30>
 4e2:	18 f4       	brcc	.+6      	; 0x4ea <DIO_toggle+0xc>
 4e4:	61 34       	cpi	r22, 0x41	; 65
 4e6:	31 f0       	breq	.+12     	; 0x4f4 <DIO_toggle+0x16>
 4e8:	08 95       	ret
 4ea:	63 34       	cpi	r22, 0x43	; 67
 4ec:	e9 f0       	breq	.+58     	; 0x528 <DIO_toggle+0x4a>
 4ee:	64 34       	cpi	r22, 0x44	; 68
 4f0:	41 f1       	breq	.+80     	; 0x542 <DIO_toggle+0x64>
 4f2:	08 95       	ret
		case PORT_A:
			TOGGLE_BIT(PORTA, pinNumber);
 4f4:	4b b3       	in	r20, 0x1b	; 27
 4f6:	21 e0       	ldi	r18, 0x01	; 1
 4f8:	30 e0       	ldi	r19, 0x00	; 0
 4fa:	b9 01       	movw	r22, r18
 4fc:	02 c0       	rjmp	.+4      	; 0x502 <DIO_toggle+0x24>
 4fe:	66 0f       	add	r22, r22
 500:	77 1f       	adc	r23, r23
 502:	8a 95       	dec	r24
 504:	e2 f7       	brpl	.-8      	; 0x4fe <DIO_toggle+0x20>
 506:	cb 01       	movw	r24, r22
 508:	84 27       	eor	r24, r20
 50a:	8b bb       	out	0x1b, r24	; 27
		break;
 50c:	08 95       	ret
		case PORT_B:
			TOGGLE_BIT(PORTB, pinNumber);
 50e:	48 b3       	in	r20, 0x18	; 24
 510:	21 e0       	ldi	r18, 0x01	; 1
 512:	30 e0       	ldi	r19, 0x00	; 0
 514:	b9 01       	movw	r22, r18
 516:	02 c0       	rjmp	.+4      	; 0x51c <DIO_toggle+0x3e>
 518:	66 0f       	add	r22, r22
 51a:	77 1f       	adc	r23, r23
 51c:	8a 95       	dec	r24
 51e:	e2 f7       	brpl	.-8      	; 0x518 <DIO_toggle+0x3a>
 520:	cb 01       	movw	r24, r22
 522:	84 27       	eor	r24, r20
 524:	88 bb       	out	0x18, r24	; 24
		break;
 526:	08 95       	ret
		case PORT_C:
			TOGGLE_BIT(PORTC, pinNumber);
 528:	45 b3       	in	r20, 0x15	; 21
 52a:	21 e0       	ldi	r18, 0x01	; 1
 52c:	30 e0       	ldi	r19, 0x00	; 0
 52e:	b9 01       	movw	r22, r18
 530:	02 c0       	rjmp	.+4      	; 0x536 <DIO_toggle+0x58>
 532:	66 0f       	add	r22, r22
 534:	77 1f       	adc	r23, r23
 536:	8a 95       	dec	r24
 538:	e2 f7       	brpl	.-8      	; 0x532 <DIO_toggle+0x54>
 53a:	cb 01       	movw	r24, r22
 53c:	84 27       	eor	r24, r20
 53e:	85 bb       	out	0x15, r24	; 21
		break;
 540:	08 95       	ret
		case PORT_D:
			TOGGLE_BIT(PORTD, pinNumber);
 542:	42 b3       	in	r20, 0x12	; 18
 544:	21 e0       	ldi	r18, 0x01	; 1
 546:	30 e0       	ldi	r19, 0x00	; 0
 548:	b9 01       	movw	r22, r18
 54a:	02 c0       	rjmp	.+4      	; 0x550 <DIO_toggle+0x72>
 54c:	66 0f       	add	r22, r22
 54e:	77 1f       	adc	r23, r23
 550:	8a 95       	dec	r24
 552:	e2 f7       	brpl	.-8      	; 0x54c <DIO_toggle+0x6e>
 554:	cb 01       	movw	r24, r22
 556:	84 27       	eor	r24, r20
 558:	82 bb       	out	0x12, r24	; 18
 55a:	08 95       	ret

0000055c <TIMER_delay>:

#define FREQUENCY 1000000



void TIMER_delay(int milliseconds){
 55c:	8f 92       	push	r8
 55e:	9f 92       	push	r9
 560:	af 92       	push	r10
 562:	bf 92       	push	r11
 564:	cf 92       	push	r12
 566:	df 92       	push	r13
 568:	ef 92       	push	r14
 56a:	ff 92       	push	r15
 56c:	cf 93       	push	r28
 56e:	df 93       	push	r29
	TCCR0 = 0x00;
 570:	13 be       	out	0x33, r1	; 51
	TCNT0 = 0x00;
 572:	12 be       	out	0x32, r1	; 50
	
	float no_of_overflows, time_initial_value;
	float ms_fl = (float) milliseconds/1000;
 574:	bc 01       	movw	r22, r24
 576:	99 0f       	add	r25, r25
 578:	88 0b       	sbc	r24, r24
 57a:	99 0b       	sbc	r25, r25
 57c:	0e 94 80 04 	call	0x900	; 0x900 <__floatsisf>
 580:	6b 01       	movw	r12, r22
 582:	7c 01       	movw	r14, r24
 584:	20 e0       	ldi	r18, 0x00	; 0
 586:	30 e0       	ldi	r19, 0x00	; 0
 588:	4a e7       	ldi	r20, 0x7A	; 122
 58a:	54 e4       	ldi	r21, 0x44	; 68
 58c:	0e 94 d6 03 	call	0x7ac	; 0x7ac <__divsf3>
 590:	4b 01       	movw	r8, r22
 592:	5c 01       	movw	r10, r24
	float t_tick = 1024.0/FREQUENCY;
	float t_max_delay = pow(2,8)*t_tick;
	
	if(milliseconds < t_max_delay){
 594:	2d eb       	ldi	r18, 0xBD	; 189
 596:	37 e3       	ldi	r19, 0x37	; 55
 598:	46 e8       	ldi	r20, 0x86	; 134
 59a:	5e e3       	ldi	r21, 0x3E	; 62
 59c:	c7 01       	movw	r24, r14
 59e:	b6 01       	movw	r22, r12
 5a0:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <__cmpsf2>
 5a4:	88 23       	and	r24, r24
 5a6:	cc f4       	brge	.+50     	; 0x5da <TIMER_delay+0x7e>
		time_initial_value = ceil((t_max_delay-ms_fl)/t_tick);
 5a8:	a5 01       	movw	r20, r10
 5aa:	94 01       	movw	r18, r8
 5ac:	6d eb       	ldi	r22, 0xBD	; 189
 5ae:	77 e3       	ldi	r23, 0x37	; 55
 5b0:	86 e8       	ldi	r24, 0x86	; 134
 5b2:	9e e3       	ldi	r25, 0x3E	; 62
 5b4:	0e 94 4d 03 	call	0x69a	; 0x69a <__subsf3>
 5b8:	2d eb       	ldi	r18, 0xBD	; 189
 5ba:	37 e3       	ldi	r19, 0x37	; 55
 5bc:	46 e8       	ldi	r20, 0x86	; 134
 5be:	5a e3       	ldi	r21, 0x3A	; 58
 5c0:	0e 94 d6 03 	call	0x7ac	; 0x7ac <__divsf3>
 5c4:	0e 94 ba 03 	call	0x774	; 0x774 <ceil>
		no_of_overflows = 1;
 5c8:	0f 2e       	mov	r0, r31
 5ca:	c1 2c       	mov	r12, r1
 5cc:	d1 2c       	mov	r13, r1
 5ce:	f0 e8       	ldi	r31, 0x80	; 128
 5d0:	ef 2e       	mov	r14, r31
 5d2:	ff e3       	ldi	r31, 0x3F	; 63
 5d4:	ff 2e       	mov	r15, r31
 5d6:	f0 2d       	mov	r31, r0
 5d8:	38 c0       	rjmp	.+112    	; 0x64a <TIMER_delay+0xee>
	}else if(milliseconds == t_max_delay){
 5da:	2d eb       	ldi	r18, 0xBD	; 189
 5dc:	37 e3       	ldi	r19, 0x37	; 55
 5de:	46 e8       	ldi	r20, 0x86	; 134
 5e0:	5e e3       	ldi	r21, 0x3E	; 62
 5e2:	c7 01       	movw	r24, r14
 5e4:	b6 01       	movw	r22, r12
 5e6:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <__cmpsf2>
 5ea:	88 23       	and	r24, r24
 5ec:	19 f1       	breq	.+70     	; 0x634 <TIMER_delay+0xd8>
		time_initial_value = 0;
		no_of_overflows = 1;
	}else{
		no_of_overflows = ceil((ms_fl)/t_max_delay);
 5ee:	2d eb       	ldi	r18, 0xBD	; 189
 5f0:	37 e3       	ldi	r19, 0x37	; 55
 5f2:	46 e8       	ldi	r20, 0x86	; 134
 5f4:	5e e3       	ldi	r21, 0x3E	; 62
 5f6:	c5 01       	movw	r24, r10
 5f8:	b4 01       	movw	r22, r8
 5fa:	0e 94 d6 03 	call	0x7ac	; 0x7ac <__divsf3>
 5fe:	0e 94 ba 03 	call	0x774	; 0x774 <ceil>
 602:	6b 01       	movw	r12, r22
 604:	7c 01       	movw	r14, r24
		time_initial_value = ceil(pow(2,8) - ((ms_fl)/t_tick)/no_of_overflows);	
 606:	2d eb       	ldi	r18, 0xBD	; 189
 608:	37 e3       	ldi	r19, 0x37	; 55
 60a:	46 e8       	ldi	r20, 0x86	; 134
 60c:	5a e3       	ldi	r21, 0x3A	; 58
 60e:	c5 01       	movw	r24, r10
 610:	b4 01       	movw	r22, r8
 612:	0e 94 d6 03 	call	0x7ac	; 0x7ac <__divsf3>
 616:	a7 01       	movw	r20, r14
 618:	96 01       	movw	r18, r12
 61a:	0e 94 d6 03 	call	0x7ac	; 0x7ac <__divsf3>
 61e:	9b 01       	movw	r18, r22
 620:	ac 01       	movw	r20, r24
 622:	60 e0       	ldi	r22, 0x00	; 0
 624:	70 e0       	ldi	r23, 0x00	; 0
 626:	80 e8       	ldi	r24, 0x80	; 128
 628:	93 e4       	ldi	r25, 0x43	; 67
 62a:	0e 94 4d 03 	call	0x69a	; 0x69a <__subsf3>
 62e:	0e 94 ba 03 	call	0x774	; 0x774 <ceil>
 632:	0b c0       	rjmp	.+22     	; 0x64a <TIMER_delay+0xee>
	
	if(milliseconds < t_max_delay){
		time_initial_value = ceil((t_max_delay-ms_fl)/t_tick);
		no_of_overflows = 1;
	}else if(milliseconds == t_max_delay){
		time_initial_value = 0;
 634:	60 e0       	ldi	r22, 0x00	; 0
 636:	70 e0       	ldi	r23, 0x00	; 0
 638:	cb 01       	movw	r24, r22
		no_of_overflows = 1;
 63a:	0f 2e       	mov	r0, r31
 63c:	c1 2c       	mov	r12, r1
 63e:	d1 2c       	mov	r13, r1
 640:	f0 e8       	ldi	r31, 0x80	; 128
 642:	ef 2e       	mov	r14, r31
 644:	ff e3       	ldi	r31, 0x3F	; 63
 646:	ff 2e       	mov	r15, r31
 648:	f0 2d       	mov	r31, r0
		no_of_overflows = ceil((ms_fl)/t_max_delay);
		time_initial_value = ceil(pow(2,8) - ((ms_fl)/t_tick)/no_of_overflows);	
	}
	
	
	TCNT0 = (uint8_t) time_initial_value;
 64a:	0e 94 4f 04 	call	0x89e	; 0x89e <__fixunssfsi>
 64e:	62 bf       	out	0x32, r22	; 50
	SET_BIT(TCCR0, 2);
 650:	83 b7       	in	r24, 0x33	; 51
 652:	84 60       	ori	r24, 0x04	; 4
 654:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0, 0);
 656:	83 b7       	in	r24, 0x33	; 51
 658:	81 60       	ori	r24, 0x01	; 1
 65a:	83 bf       	out	0x33, r24	; 51
	unsigned int noOfCountOverflows = 0;
 65c:	c0 e0       	ldi	r28, 0x00	; 0
 65e:	d0 e0       	ldi	r29, 0x00	; 0
	while(noOfCountOverflows < (int) no_of_overflows){	
 660:	07 c0       	rjmp	.+14     	; 0x670 <TIMER_delay+0x114>
		while(BIT_IS_SET(TIFR, 0) == 0);
 662:	08 b6       	in	r0, 0x38	; 56
 664:	00 fe       	sbrs	r0, 0
 666:	fd cf       	rjmp	.-6      	; 0x662 <TIMER_delay+0x106>
		SET_BIT(TIFR, 0);
 668:	88 b7       	in	r24, 0x38	; 56
 66a:	81 60       	ori	r24, 0x01	; 1
 66c:	88 bf       	out	0x38, r24	; 56
		noOfCountOverflows++;
 66e:	21 96       	adiw	r28, 0x01	; 1
	
	TCNT0 = (uint8_t) time_initial_value;
	SET_BIT(TCCR0, 2);
	SET_BIT(TCCR0, 0);
	unsigned int noOfCountOverflows = 0;
	while(noOfCountOverflows < (int) no_of_overflows){	
 670:	c7 01       	movw	r24, r14
 672:	b6 01       	movw	r22, r12
 674:	0e 94 48 04 	call	0x890	; 0x890 <__fixsfsi>
 678:	c6 17       	cp	r28, r22
 67a:	d7 07       	cpc	r29, r23
 67c:	90 f3       	brcs	.-28     	; 0x662 <TIMER_delay+0x106>
		while(BIT_IS_SET(TIFR, 0) == 0);
		SET_BIT(TIFR, 0);
		noOfCountOverflows++;
	}
	TIFR = 0x00;
 67e:	18 be       	out	0x38, r1	; 56
	TCCR0 = 0x00;
 680:	13 be       	out	0x33, r1	; 51
	TCNT0 = 0x00;
 682:	12 be       	out	0x32, r1	; 50
	
	
 684:	df 91       	pop	r29
 686:	cf 91       	pop	r28
 688:	ff 90       	pop	r15
 68a:	ef 90       	pop	r14
 68c:	df 90       	pop	r13
 68e:	cf 90       	pop	r12
 690:	bf 90       	pop	r11
 692:	af 90       	pop	r10
 694:	9f 90       	pop	r9
 696:	8f 90       	pop	r8
 698:	08 95       	ret

0000069a <__subsf3>:
 69a:	50 58       	subi	r21, 0x80	; 128

0000069c <__addsf3>:
 69c:	bb 27       	eor	r27, r27
 69e:	aa 27       	eor	r26, r26
 6a0:	0e 94 65 03 	call	0x6ca	; 0x6ca <__addsf3x>
 6a4:	0c 94 1f 05 	jmp	0xa3e	; 0xa3e <__fp_round>
 6a8:	0e 94 11 05 	call	0xa22	; 0xa22 <__fp_pscA>
 6ac:	38 f0       	brcs	.+14     	; 0x6bc <__addsf3+0x20>
 6ae:	0e 94 18 05 	call	0xa30	; 0xa30 <__fp_pscB>
 6b2:	20 f0       	brcs	.+8      	; 0x6bc <__addsf3+0x20>
 6b4:	39 f4       	brne	.+14     	; 0x6c4 <__addsf3+0x28>
 6b6:	9f 3f       	cpi	r25, 0xFF	; 255
 6b8:	19 f4       	brne	.+6      	; 0x6c0 <__addsf3+0x24>
 6ba:	26 f4       	brtc	.+8      	; 0x6c4 <__addsf3+0x28>
 6bc:	0c 94 0e 05 	jmp	0xa1c	; 0xa1c <__fp_nan>
 6c0:	0e f4       	brtc	.+2      	; 0x6c4 <__addsf3+0x28>
 6c2:	e0 95       	com	r30
 6c4:	e7 fb       	bst	r30, 7
 6c6:	0c 94 df 04 	jmp	0x9be	; 0x9be <__fp_inf>

000006ca <__addsf3x>:
 6ca:	e9 2f       	mov	r30, r25
 6cc:	0e 94 30 05 	call	0xa60	; 0xa60 <__fp_split3>
 6d0:	58 f3       	brcs	.-42     	; 0x6a8 <__addsf3+0xc>
 6d2:	ba 17       	cp	r27, r26
 6d4:	62 07       	cpc	r22, r18
 6d6:	73 07       	cpc	r23, r19
 6d8:	84 07       	cpc	r24, r20
 6da:	95 07       	cpc	r25, r21
 6dc:	20 f0       	brcs	.+8      	; 0x6e6 <__addsf3x+0x1c>
 6de:	79 f4       	brne	.+30     	; 0x6fe <__addsf3x+0x34>
 6e0:	a6 f5       	brtc	.+104    	; 0x74a <__addsf3x+0x80>
 6e2:	0c 94 6a 05 	jmp	0xad4	; 0xad4 <__fp_zero>
 6e6:	0e f4       	brtc	.+2      	; 0x6ea <__addsf3x+0x20>
 6e8:	e0 95       	com	r30
 6ea:	0b 2e       	mov	r0, r27
 6ec:	ba 2f       	mov	r27, r26
 6ee:	a0 2d       	mov	r26, r0
 6f0:	0b 01       	movw	r0, r22
 6f2:	b9 01       	movw	r22, r18
 6f4:	90 01       	movw	r18, r0
 6f6:	0c 01       	movw	r0, r24
 6f8:	ca 01       	movw	r24, r20
 6fa:	a0 01       	movw	r20, r0
 6fc:	11 24       	eor	r1, r1
 6fe:	ff 27       	eor	r31, r31
 700:	59 1b       	sub	r21, r25
 702:	99 f0       	breq	.+38     	; 0x72a <__addsf3x+0x60>
 704:	59 3f       	cpi	r21, 0xF9	; 249
 706:	50 f4       	brcc	.+20     	; 0x71c <__addsf3x+0x52>
 708:	50 3e       	cpi	r21, 0xE0	; 224
 70a:	68 f1       	brcs	.+90     	; 0x766 <__addsf3x+0x9c>
 70c:	1a 16       	cp	r1, r26
 70e:	f0 40       	sbci	r31, 0x00	; 0
 710:	a2 2f       	mov	r26, r18
 712:	23 2f       	mov	r18, r19
 714:	34 2f       	mov	r19, r20
 716:	44 27       	eor	r20, r20
 718:	58 5f       	subi	r21, 0xF8	; 248
 71a:	f3 cf       	rjmp	.-26     	; 0x702 <__addsf3x+0x38>
 71c:	46 95       	lsr	r20
 71e:	37 95       	ror	r19
 720:	27 95       	ror	r18
 722:	a7 95       	ror	r26
 724:	f0 40       	sbci	r31, 0x00	; 0
 726:	53 95       	inc	r21
 728:	c9 f7       	brne	.-14     	; 0x71c <__addsf3x+0x52>
 72a:	7e f4       	brtc	.+30     	; 0x74a <__addsf3x+0x80>
 72c:	1f 16       	cp	r1, r31
 72e:	ba 0b       	sbc	r27, r26
 730:	62 0b       	sbc	r22, r18
 732:	73 0b       	sbc	r23, r19
 734:	84 0b       	sbc	r24, r20
 736:	ba f0       	brmi	.+46     	; 0x766 <__addsf3x+0x9c>
 738:	91 50       	subi	r25, 0x01	; 1
 73a:	a1 f0       	breq	.+40     	; 0x764 <__addsf3x+0x9a>
 73c:	ff 0f       	add	r31, r31
 73e:	bb 1f       	adc	r27, r27
 740:	66 1f       	adc	r22, r22
 742:	77 1f       	adc	r23, r23
 744:	88 1f       	adc	r24, r24
 746:	c2 f7       	brpl	.-16     	; 0x738 <__addsf3x+0x6e>
 748:	0e c0       	rjmp	.+28     	; 0x766 <__addsf3x+0x9c>
 74a:	ba 0f       	add	r27, r26
 74c:	62 1f       	adc	r22, r18
 74e:	73 1f       	adc	r23, r19
 750:	84 1f       	adc	r24, r20
 752:	48 f4       	brcc	.+18     	; 0x766 <__addsf3x+0x9c>
 754:	87 95       	ror	r24
 756:	77 95       	ror	r23
 758:	67 95       	ror	r22
 75a:	b7 95       	ror	r27
 75c:	f7 95       	ror	r31
 75e:	9e 3f       	cpi	r25, 0xFE	; 254
 760:	08 f0       	brcs	.+2      	; 0x764 <__addsf3x+0x9a>
 762:	b0 cf       	rjmp	.-160    	; 0x6c4 <__addsf3+0x28>
 764:	93 95       	inc	r25
 766:	88 0f       	add	r24, r24
 768:	08 f0       	brcs	.+2      	; 0x76c <__addsf3x+0xa2>
 76a:	99 27       	eor	r25, r25
 76c:	ee 0f       	add	r30, r30
 76e:	97 95       	ror	r25
 770:	87 95       	ror	r24
 772:	08 95       	ret

00000774 <ceil>:
 774:	0e 94 52 05 	call	0xaa4	; 0xaa4 <__fp_trunc>
 778:	90 f0       	brcs	.+36     	; 0x79e <ceil+0x2a>
 77a:	9f 37       	cpi	r25, 0x7F	; 127
 77c:	48 f4       	brcc	.+18     	; 0x790 <ceil+0x1c>
 77e:	91 11       	cpse	r25, r1
 780:	16 f4       	brtc	.+4      	; 0x786 <ceil+0x12>
 782:	0c 94 6b 05 	jmp	0xad6	; 0xad6 <__fp_szero>
 786:	60 e0       	ldi	r22, 0x00	; 0
 788:	70 e0       	ldi	r23, 0x00	; 0
 78a:	80 e8       	ldi	r24, 0x80	; 128
 78c:	9f e3       	ldi	r25, 0x3F	; 63
 78e:	08 95       	ret
 790:	26 f0       	brts	.+8      	; 0x79a <ceil+0x26>
 792:	1b 16       	cp	r1, r27
 794:	61 1d       	adc	r22, r1
 796:	71 1d       	adc	r23, r1
 798:	81 1d       	adc	r24, r1
 79a:	0c 94 e5 04 	jmp	0x9ca	; 0x9ca <__fp_mintl>
 79e:	0c 94 00 05 	jmp	0xa00	; 0xa00 <__fp_mpack>

000007a2 <__cmpsf2>:
 7a2:	0e 94 bb 04 	call	0x976	; 0x976 <__fp_cmp>
 7a6:	08 f4       	brcc	.+2      	; 0x7aa <__cmpsf2+0x8>
 7a8:	81 e0       	ldi	r24, 0x01	; 1
 7aa:	08 95       	ret

000007ac <__divsf3>:
 7ac:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <__divsf3x>
 7b0:	0c 94 1f 05 	jmp	0xa3e	; 0xa3e <__fp_round>
 7b4:	0e 94 18 05 	call	0xa30	; 0xa30 <__fp_pscB>
 7b8:	58 f0       	brcs	.+22     	; 0x7d0 <__divsf3+0x24>
 7ba:	0e 94 11 05 	call	0xa22	; 0xa22 <__fp_pscA>
 7be:	40 f0       	brcs	.+16     	; 0x7d0 <__divsf3+0x24>
 7c0:	29 f4       	brne	.+10     	; 0x7cc <__divsf3+0x20>
 7c2:	5f 3f       	cpi	r21, 0xFF	; 255
 7c4:	29 f0       	breq	.+10     	; 0x7d0 <__divsf3+0x24>
 7c6:	0c 94 df 04 	jmp	0x9be	; 0x9be <__fp_inf>
 7ca:	51 11       	cpse	r21, r1
 7cc:	0c 94 6b 05 	jmp	0xad6	; 0xad6 <__fp_szero>
 7d0:	0c 94 0e 05 	jmp	0xa1c	; 0xa1c <__fp_nan>

000007d4 <__divsf3x>:
 7d4:	0e 94 30 05 	call	0xa60	; 0xa60 <__fp_split3>
 7d8:	68 f3       	brcs	.-38     	; 0x7b4 <__divsf3+0x8>

000007da <__divsf3_pse>:
 7da:	99 23       	and	r25, r25
 7dc:	b1 f3       	breq	.-20     	; 0x7ca <__divsf3+0x1e>
 7de:	55 23       	and	r21, r21
 7e0:	91 f3       	breq	.-28     	; 0x7c6 <__divsf3+0x1a>
 7e2:	95 1b       	sub	r25, r21
 7e4:	55 0b       	sbc	r21, r21
 7e6:	bb 27       	eor	r27, r27
 7e8:	aa 27       	eor	r26, r26
 7ea:	62 17       	cp	r22, r18
 7ec:	73 07       	cpc	r23, r19
 7ee:	84 07       	cpc	r24, r20
 7f0:	38 f0       	brcs	.+14     	; 0x800 <__DATA_REGION_LENGTH__>
 7f2:	9f 5f       	subi	r25, 0xFF	; 255
 7f4:	5f 4f       	sbci	r21, 0xFF	; 255
 7f6:	22 0f       	add	r18, r18
 7f8:	33 1f       	adc	r19, r19
 7fa:	44 1f       	adc	r20, r20
 7fc:	aa 1f       	adc	r26, r26
 7fe:	a9 f3       	breq	.-22     	; 0x7ea <__divsf3_pse+0x10>
 800:	35 d0       	rcall	.+106    	; 0x86c <__stack+0xd>
 802:	0e 2e       	mov	r0, r30
 804:	3a f0       	brmi	.+14     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 806:	e0 e8       	ldi	r30, 0x80	; 128
 808:	32 d0       	rcall	.+100    	; 0x86e <__stack+0xf>
 80a:	91 50       	subi	r25, 0x01	; 1
 80c:	50 40       	sbci	r21, 0x00	; 0
 80e:	e6 95       	lsr	r30
 810:	00 1c       	adc	r0, r0
 812:	ca f7       	brpl	.-14     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 814:	2b d0       	rcall	.+86     	; 0x86c <__stack+0xd>
 816:	fe 2f       	mov	r31, r30
 818:	29 d0       	rcall	.+82     	; 0x86c <__stack+0xd>
 81a:	66 0f       	add	r22, r22
 81c:	77 1f       	adc	r23, r23
 81e:	88 1f       	adc	r24, r24
 820:	bb 1f       	adc	r27, r27
 822:	26 17       	cp	r18, r22
 824:	37 07       	cpc	r19, r23
 826:	48 07       	cpc	r20, r24
 828:	ab 07       	cpc	r26, r27
 82a:	b0 e8       	ldi	r27, 0x80	; 128
 82c:	09 f0       	breq	.+2      	; 0x830 <__DATA_REGION_LENGTH__+0x30>
 82e:	bb 0b       	sbc	r27, r27
 830:	80 2d       	mov	r24, r0
 832:	bf 01       	movw	r22, r30
 834:	ff 27       	eor	r31, r31
 836:	93 58       	subi	r25, 0x83	; 131
 838:	5f 4f       	sbci	r21, 0xFF	; 255
 83a:	3a f0       	brmi	.+14     	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 83c:	9e 3f       	cpi	r25, 0xFE	; 254
 83e:	51 05       	cpc	r21, r1
 840:	78 f0       	brcs	.+30     	; 0x860 <__stack+0x1>
 842:	0c 94 df 04 	jmp	0x9be	; 0x9be <__fp_inf>
 846:	0c 94 6b 05 	jmp	0xad6	; 0xad6 <__fp_szero>
 84a:	5f 3f       	cpi	r21, 0xFF	; 255
 84c:	e4 f3       	brlt	.-8      	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 84e:	98 3e       	cpi	r25, 0xE8	; 232
 850:	d4 f3       	brlt	.-12     	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 852:	86 95       	lsr	r24
 854:	77 95       	ror	r23
 856:	67 95       	ror	r22
 858:	b7 95       	ror	r27
 85a:	f7 95       	ror	r31
 85c:	9f 5f       	subi	r25, 0xFF	; 255
 85e:	c9 f7       	brne	.-14     	; 0x852 <__DATA_REGION_LENGTH__+0x52>
 860:	88 0f       	add	r24, r24
 862:	91 1d       	adc	r25, r1
 864:	96 95       	lsr	r25
 866:	87 95       	ror	r24
 868:	97 f9       	bld	r25, 7
 86a:	08 95       	ret
 86c:	e1 e0       	ldi	r30, 0x01	; 1
 86e:	66 0f       	add	r22, r22
 870:	77 1f       	adc	r23, r23
 872:	88 1f       	adc	r24, r24
 874:	bb 1f       	adc	r27, r27
 876:	62 17       	cp	r22, r18
 878:	73 07       	cpc	r23, r19
 87a:	84 07       	cpc	r24, r20
 87c:	ba 07       	cpc	r27, r26
 87e:	20 f0       	brcs	.+8      	; 0x888 <__stack+0x29>
 880:	62 1b       	sub	r22, r18
 882:	73 0b       	sbc	r23, r19
 884:	84 0b       	sbc	r24, r20
 886:	ba 0b       	sbc	r27, r26
 888:	ee 1f       	adc	r30, r30
 88a:	88 f7       	brcc	.-30     	; 0x86e <__stack+0xf>
 88c:	e0 95       	com	r30
 88e:	08 95       	ret

00000890 <__fixsfsi>:
 890:	0e 94 4f 04 	call	0x89e	; 0x89e <__fixunssfsi>
 894:	68 94       	set
 896:	b1 11       	cpse	r27, r1
 898:	0c 94 6b 05 	jmp	0xad6	; 0xad6 <__fp_szero>
 89c:	08 95       	ret

0000089e <__fixunssfsi>:
 89e:	0e 94 38 05 	call	0xa70	; 0xa70 <__fp_splitA>
 8a2:	88 f0       	brcs	.+34     	; 0x8c6 <__fixunssfsi+0x28>
 8a4:	9f 57       	subi	r25, 0x7F	; 127
 8a6:	98 f0       	brcs	.+38     	; 0x8ce <__fixunssfsi+0x30>
 8a8:	b9 2f       	mov	r27, r25
 8aa:	99 27       	eor	r25, r25
 8ac:	b7 51       	subi	r27, 0x17	; 23
 8ae:	b0 f0       	brcs	.+44     	; 0x8dc <__fixunssfsi+0x3e>
 8b0:	e1 f0       	breq	.+56     	; 0x8ea <__fixunssfsi+0x4c>
 8b2:	66 0f       	add	r22, r22
 8b4:	77 1f       	adc	r23, r23
 8b6:	88 1f       	adc	r24, r24
 8b8:	99 1f       	adc	r25, r25
 8ba:	1a f0       	brmi	.+6      	; 0x8c2 <__fixunssfsi+0x24>
 8bc:	ba 95       	dec	r27
 8be:	c9 f7       	brne	.-14     	; 0x8b2 <__fixunssfsi+0x14>
 8c0:	14 c0       	rjmp	.+40     	; 0x8ea <__fixunssfsi+0x4c>
 8c2:	b1 30       	cpi	r27, 0x01	; 1
 8c4:	91 f0       	breq	.+36     	; 0x8ea <__fixunssfsi+0x4c>
 8c6:	0e 94 6a 05 	call	0xad4	; 0xad4 <__fp_zero>
 8ca:	b1 e0       	ldi	r27, 0x01	; 1
 8cc:	08 95       	ret
 8ce:	0c 94 6a 05 	jmp	0xad4	; 0xad4 <__fp_zero>
 8d2:	67 2f       	mov	r22, r23
 8d4:	78 2f       	mov	r23, r24
 8d6:	88 27       	eor	r24, r24
 8d8:	b8 5f       	subi	r27, 0xF8	; 248
 8da:	39 f0       	breq	.+14     	; 0x8ea <__fixunssfsi+0x4c>
 8dc:	b9 3f       	cpi	r27, 0xF9	; 249
 8de:	cc f3       	brlt	.-14     	; 0x8d2 <__fixunssfsi+0x34>
 8e0:	86 95       	lsr	r24
 8e2:	77 95       	ror	r23
 8e4:	67 95       	ror	r22
 8e6:	b3 95       	inc	r27
 8e8:	d9 f7       	brne	.-10     	; 0x8e0 <__fixunssfsi+0x42>
 8ea:	3e f4       	brtc	.+14     	; 0x8fa <__fixunssfsi+0x5c>
 8ec:	90 95       	com	r25
 8ee:	80 95       	com	r24
 8f0:	70 95       	com	r23
 8f2:	61 95       	neg	r22
 8f4:	7f 4f       	sbci	r23, 0xFF	; 255
 8f6:	8f 4f       	sbci	r24, 0xFF	; 255
 8f8:	9f 4f       	sbci	r25, 0xFF	; 255
 8fa:	08 95       	ret

000008fc <__floatunsisf>:
 8fc:	e8 94       	clt
 8fe:	09 c0       	rjmp	.+18     	; 0x912 <__floatsisf+0x12>

00000900 <__floatsisf>:
 900:	97 fb       	bst	r25, 7
 902:	3e f4       	brtc	.+14     	; 0x912 <__floatsisf+0x12>
 904:	90 95       	com	r25
 906:	80 95       	com	r24
 908:	70 95       	com	r23
 90a:	61 95       	neg	r22
 90c:	7f 4f       	sbci	r23, 0xFF	; 255
 90e:	8f 4f       	sbci	r24, 0xFF	; 255
 910:	9f 4f       	sbci	r25, 0xFF	; 255
 912:	99 23       	and	r25, r25
 914:	a9 f0       	breq	.+42     	; 0x940 <__floatsisf+0x40>
 916:	f9 2f       	mov	r31, r25
 918:	96 e9       	ldi	r25, 0x96	; 150
 91a:	bb 27       	eor	r27, r27
 91c:	93 95       	inc	r25
 91e:	f6 95       	lsr	r31
 920:	87 95       	ror	r24
 922:	77 95       	ror	r23
 924:	67 95       	ror	r22
 926:	b7 95       	ror	r27
 928:	f1 11       	cpse	r31, r1
 92a:	f8 cf       	rjmp	.-16     	; 0x91c <__floatsisf+0x1c>
 92c:	fa f4       	brpl	.+62     	; 0x96c <__floatsisf+0x6c>
 92e:	bb 0f       	add	r27, r27
 930:	11 f4       	brne	.+4      	; 0x936 <__floatsisf+0x36>
 932:	60 ff       	sbrs	r22, 0
 934:	1b c0       	rjmp	.+54     	; 0x96c <__floatsisf+0x6c>
 936:	6f 5f       	subi	r22, 0xFF	; 255
 938:	7f 4f       	sbci	r23, 0xFF	; 255
 93a:	8f 4f       	sbci	r24, 0xFF	; 255
 93c:	9f 4f       	sbci	r25, 0xFF	; 255
 93e:	16 c0       	rjmp	.+44     	; 0x96c <__floatsisf+0x6c>
 940:	88 23       	and	r24, r24
 942:	11 f0       	breq	.+4      	; 0x948 <__floatsisf+0x48>
 944:	96 e9       	ldi	r25, 0x96	; 150
 946:	11 c0       	rjmp	.+34     	; 0x96a <__floatsisf+0x6a>
 948:	77 23       	and	r23, r23
 94a:	21 f0       	breq	.+8      	; 0x954 <__floatsisf+0x54>
 94c:	9e e8       	ldi	r25, 0x8E	; 142
 94e:	87 2f       	mov	r24, r23
 950:	76 2f       	mov	r23, r22
 952:	05 c0       	rjmp	.+10     	; 0x95e <__floatsisf+0x5e>
 954:	66 23       	and	r22, r22
 956:	71 f0       	breq	.+28     	; 0x974 <__floatsisf+0x74>
 958:	96 e8       	ldi	r25, 0x86	; 134
 95a:	86 2f       	mov	r24, r22
 95c:	70 e0       	ldi	r23, 0x00	; 0
 95e:	60 e0       	ldi	r22, 0x00	; 0
 960:	2a f0       	brmi	.+10     	; 0x96c <__floatsisf+0x6c>
 962:	9a 95       	dec	r25
 964:	66 0f       	add	r22, r22
 966:	77 1f       	adc	r23, r23
 968:	88 1f       	adc	r24, r24
 96a:	da f7       	brpl	.-10     	; 0x962 <__floatsisf+0x62>
 96c:	88 0f       	add	r24, r24
 96e:	96 95       	lsr	r25
 970:	87 95       	ror	r24
 972:	97 f9       	bld	r25, 7
 974:	08 95       	ret

00000976 <__fp_cmp>:
 976:	99 0f       	add	r25, r25
 978:	00 08       	sbc	r0, r0
 97a:	55 0f       	add	r21, r21
 97c:	aa 0b       	sbc	r26, r26
 97e:	e0 e8       	ldi	r30, 0x80	; 128
 980:	fe ef       	ldi	r31, 0xFE	; 254
 982:	16 16       	cp	r1, r22
 984:	17 06       	cpc	r1, r23
 986:	e8 07       	cpc	r30, r24
 988:	f9 07       	cpc	r31, r25
 98a:	c0 f0       	brcs	.+48     	; 0x9bc <__fp_cmp+0x46>
 98c:	12 16       	cp	r1, r18
 98e:	13 06       	cpc	r1, r19
 990:	e4 07       	cpc	r30, r20
 992:	f5 07       	cpc	r31, r21
 994:	98 f0       	brcs	.+38     	; 0x9bc <__fp_cmp+0x46>
 996:	62 1b       	sub	r22, r18
 998:	73 0b       	sbc	r23, r19
 99a:	84 0b       	sbc	r24, r20
 99c:	95 0b       	sbc	r25, r21
 99e:	39 f4       	brne	.+14     	; 0x9ae <__fp_cmp+0x38>
 9a0:	0a 26       	eor	r0, r26
 9a2:	61 f0       	breq	.+24     	; 0x9bc <__fp_cmp+0x46>
 9a4:	23 2b       	or	r18, r19
 9a6:	24 2b       	or	r18, r20
 9a8:	25 2b       	or	r18, r21
 9aa:	21 f4       	brne	.+8      	; 0x9b4 <__fp_cmp+0x3e>
 9ac:	08 95       	ret
 9ae:	0a 26       	eor	r0, r26
 9b0:	09 f4       	brne	.+2      	; 0x9b4 <__fp_cmp+0x3e>
 9b2:	a1 40       	sbci	r26, 0x01	; 1
 9b4:	a6 95       	lsr	r26
 9b6:	8f ef       	ldi	r24, 0xFF	; 255
 9b8:	81 1d       	adc	r24, r1
 9ba:	81 1d       	adc	r24, r1
 9bc:	08 95       	ret

000009be <__fp_inf>:
 9be:	97 f9       	bld	r25, 7
 9c0:	9f 67       	ori	r25, 0x7F	; 127
 9c2:	80 e8       	ldi	r24, 0x80	; 128
 9c4:	70 e0       	ldi	r23, 0x00	; 0
 9c6:	60 e0       	ldi	r22, 0x00	; 0
 9c8:	08 95       	ret

000009ca <__fp_mintl>:
 9ca:	88 23       	and	r24, r24
 9cc:	71 f4       	brne	.+28     	; 0x9ea <__fp_mintl+0x20>
 9ce:	77 23       	and	r23, r23
 9d0:	21 f0       	breq	.+8      	; 0x9da <__fp_mintl+0x10>
 9d2:	98 50       	subi	r25, 0x08	; 8
 9d4:	87 2b       	or	r24, r23
 9d6:	76 2f       	mov	r23, r22
 9d8:	07 c0       	rjmp	.+14     	; 0x9e8 <__fp_mintl+0x1e>
 9da:	66 23       	and	r22, r22
 9dc:	11 f4       	brne	.+4      	; 0x9e2 <__fp_mintl+0x18>
 9de:	99 27       	eor	r25, r25
 9e0:	0d c0       	rjmp	.+26     	; 0x9fc <__fp_mintl+0x32>
 9e2:	90 51       	subi	r25, 0x10	; 16
 9e4:	86 2b       	or	r24, r22
 9e6:	70 e0       	ldi	r23, 0x00	; 0
 9e8:	60 e0       	ldi	r22, 0x00	; 0
 9ea:	2a f0       	brmi	.+10     	; 0x9f6 <__fp_mintl+0x2c>
 9ec:	9a 95       	dec	r25
 9ee:	66 0f       	add	r22, r22
 9f0:	77 1f       	adc	r23, r23
 9f2:	88 1f       	adc	r24, r24
 9f4:	da f7       	brpl	.-10     	; 0x9ec <__fp_mintl+0x22>
 9f6:	88 0f       	add	r24, r24
 9f8:	96 95       	lsr	r25
 9fa:	87 95       	ror	r24
 9fc:	97 f9       	bld	r25, 7
 9fe:	08 95       	ret

00000a00 <__fp_mpack>:
 a00:	9f 3f       	cpi	r25, 0xFF	; 255
 a02:	31 f0       	breq	.+12     	; 0xa10 <__fp_mpack_finite+0xc>

00000a04 <__fp_mpack_finite>:
 a04:	91 50       	subi	r25, 0x01	; 1
 a06:	20 f4       	brcc	.+8      	; 0xa10 <__fp_mpack_finite+0xc>
 a08:	87 95       	ror	r24
 a0a:	77 95       	ror	r23
 a0c:	67 95       	ror	r22
 a0e:	b7 95       	ror	r27
 a10:	88 0f       	add	r24, r24
 a12:	91 1d       	adc	r25, r1
 a14:	96 95       	lsr	r25
 a16:	87 95       	ror	r24
 a18:	97 f9       	bld	r25, 7
 a1a:	08 95       	ret

00000a1c <__fp_nan>:
 a1c:	9f ef       	ldi	r25, 0xFF	; 255
 a1e:	80 ec       	ldi	r24, 0xC0	; 192
 a20:	08 95       	ret

00000a22 <__fp_pscA>:
 a22:	00 24       	eor	r0, r0
 a24:	0a 94       	dec	r0
 a26:	16 16       	cp	r1, r22
 a28:	17 06       	cpc	r1, r23
 a2a:	18 06       	cpc	r1, r24
 a2c:	09 06       	cpc	r0, r25
 a2e:	08 95       	ret

00000a30 <__fp_pscB>:
 a30:	00 24       	eor	r0, r0
 a32:	0a 94       	dec	r0
 a34:	12 16       	cp	r1, r18
 a36:	13 06       	cpc	r1, r19
 a38:	14 06       	cpc	r1, r20
 a3a:	05 06       	cpc	r0, r21
 a3c:	08 95       	ret

00000a3e <__fp_round>:
 a3e:	09 2e       	mov	r0, r25
 a40:	03 94       	inc	r0
 a42:	00 0c       	add	r0, r0
 a44:	11 f4       	brne	.+4      	; 0xa4a <__fp_round+0xc>
 a46:	88 23       	and	r24, r24
 a48:	52 f0       	brmi	.+20     	; 0xa5e <__fp_round+0x20>
 a4a:	bb 0f       	add	r27, r27
 a4c:	40 f4       	brcc	.+16     	; 0xa5e <__fp_round+0x20>
 a4e:	bf 2b       	or	r27, r31
 a50:	11 f4       	brne	.+4      	; 0xa56 <__fp_round+0x18>
 a52:	60 ff       	sbrs	r22, 0
 a54:	04 c0       	rjmp	.+8      	; 0xa5e <__fp_round+0x20>
 a56:	6f 5f       	subi	r22, 0xFF	; 255
 a58:	7f 4f       	sbci	r23, 0xFF	; 255
 a5a:	8f 4f       	sbci	r24, 0xFF	; 255
 a5c:	9f 4f       	sbci	r25, 0xFF	; 255
 a5e:	08 95       	ret

00000a60 <__fp_split3>:
 a60:	57 fd       	sbrc	r21, 7
 a62:	90 58       	subi	r25, 0x80	; 128
 a64:	44 0f       	add	r20, r20
 a66:	55 1f       	adc	r21, r21
 a68:	59 f0       	breq	.+22     	; 0xa80 <__fp_splitA+0x10>
 a6a:	5f 3f       	cpi	r21, 0xFF	; 255
 a6c:	71 f0       	breq	.+28     	; 0xa8a <__fp_splitA+0x1a>
 a6e:	47 95       	ror	r20

00000a70 <__fp_splitA>:
 a70:	88 0f       	add	r24, r24
 a72:	97 fb       	bst	r25, 7
 a74:	99 1f       	adc	r25, r25
 a76:	61 f0       	breq	.+24     	; 0xa90 <__fp_splitA+0x20>
 a78:	9f 3f       	cpi	r25, 0xFF	; 255
 a7a:	79 f0       	breq	.+30     	; 0xa9a <__fp_splitA+0x2a>
 a7c:	87 95       	ror	r24
 a7e:	08 95       	ret
 a80:	12 16       	cp	r1, r18
 a82:	13 06       	cpc	r1, r19
 a84:	14 06       	cpc	r1, r20
 a86:	55 1f       	adc	r21, r21
 a88:	f2 cf       	rjmp	.-28     	; 0xa6e <__fp_split3+0xe>
 a8a:	46 95       	lsr	r20
 a8c:	f1 df       	rcall	.-30     	; 0xa70 <__fp_splitA>
 a8e:	08 c0       	rjmp	.+16     	; 0xaa0 <__fp_splitA+0x30>
 a90:	16 16       	cp	r1, r22
 a92:	17 06       	cpc	r1, r23
 a94:	18 06       	cpc	r1, r24
 a96:	99 1f       	adc	r25, r25
 a98:	f1 cf       	rjmp	.-30     	; 0xa7c <__fp_splitA+0xc>
 a9a:	86 95       	lsr	r24
 a9c:	71 05       	cpc	r23, r1
 a9e:	61 05       	cpc	r22, r1
 aa0:	08 94       	sec
 aa2:	08 95       	ret

00000aa4 <__fp_trunc>:
 aa4:	0e 94 38 05 	call	0xa70	; 0xa70 <__fp_splitA>
 aa8:	a0 f0       	brcs	.+40     	; 0xad2 <__fp_trunc+0x2e>
 aaa:	be e7       	ldi	r27, 0x7E	; 126
 aac:	b9 17       	cp	r27, r25
 aae:	88 f4       	brcc	.+34     	; 0xad2 <__fp_trunc+0x2e>
 ab0:	bb 27       	eor	r27, r27
 ab2:	9f 38       	cpi	r25, 0x8F	; 143
 ab4:	60 f4       	brcc	.+24     	; 0xace <__fp_trunc+0x2a>
 ab6:	16 16       	cp	r1, r22
 ab8:	b1 1d       	adc	r27, r1
 aba:	67 2f       	mov	r22, r23
 abc:	78 2f       	mov	r23, r24
 abe:	88 27       	eor	r24, r24
 ac0:	98 5f       	subi	r25, 0xF8	; 248
 ac2:	f7 cf       	rjmp	.-18     	; 0xab2 <__fp_trunc+0xe>
 ac4:	86 95       	lsr	r24
 ac6:	77 95       	ror	r23
 ac8:	67 95       	ror	r22
 aca:	b1 1d       	adc	r27, r1
 acc:	93 95       	inc	r25
 ace:	96 39       	cpi	r25, 0x96	; 150
 ad0:	c8 f3       	brcs	.-14     	; 0xac4 <__fp_trunc+0x20>
 ad2:	08 95       	ret

00000ad4 <__fp_zero>:
 ad4:	e8 94       	clt

00000ad6 <__fp_szero>:
 ad6:	bb 27       	eor	r27, r27
 ad8:	66 27       	eor	r22, r22
 ada:	77 27       	eor	r23, r23
 adc:	cb 01       	movw	r24, r22
 ade:	97 f9       	bld	r25, 7
 ae0:	08 95       	ret

00000ae2 <_exit>:
 ae2:	f8 94       	cli

00000ae4 <__stop_program>:
 ae4:	ff cf       	rjmp	.-2      	; 0xae4 <__stop_program>
